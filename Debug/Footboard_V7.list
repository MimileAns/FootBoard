
Footboard_V7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053b4  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005548  08005548  00015548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005600  08005600  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005600  08005600  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005600  08005600  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005600  08005600  00015600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005604  08005604  00015604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  08005614  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08005614  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fefa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f9  00000000  00000000  0002ff36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00032230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  000330d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211b8  00000000  00000000  00033e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fce6  00000000  00000000  00055020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd141  00000000  00000000  00064d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131e47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f80  00000000  00000000  00131e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800552c 	.word	0x0800552c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	0800552c 	.word	0x0800552c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <timer_callback_routine>:
float received_angle_203 = 0;
#endif


// callback @ 1kHz
void timer_callback_routine(){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b28:	4834      	ldr	r0, [pc, #208]	; (8000bfc <timer_callback_routine+0xe0>)
 8000b2a:	f002 f891 	bl	8002c50 <HAL_GPIO_WritePin>

#if WITH_IMU
	// get IMU
	//update_IMU_data();
	update_IMU_orient_data();
 8000b2e:	f000 fd97 	bl	8001660 <update_IMU_orient_data>
		CAN_TxData[2] = data.byte2;
		CAN_TxData[3] = data.byte3;
		HAL_CAN_AddTxMessage(&hcan1, &CAN_TxHeader, CAN_TxData, &CAN_TxMailbox);
	#else
		// lossy compression of all float data to 16bit
		int16_t comp_enc_angle = (int16_t)(0.0f * 100);
 8000b32:	2300      	movs	r3, #0
 8000b34:	80fb      	strh	r3, [r7, #6]
		int16_t comp_orient_x  = (int16_t)(get_IMU_orient_x() * 100);
 8000b36:	f000 fef7 	bl	8001928 <get_IMU_orient_x>
 8000b3a:	eef0 7a40 	vmov.f32	s15, s0
 8000b3e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000c00 <timer_callback_routine+0xe4>
 8000b42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b4a:	ee17 3a90 	vmov	r3, s15
 8000b4e:	80bb      	strh	r3, [r7, #4]
		int16_t comp_orient_y  = (int16_t)(get_IMU_orient_y() * 100);
 8000b50:	f000 fef8 	bl	8001944 <get_IMU_orient_y>
 8000b54:	eef0 7a40 	vmov.f32	s15, s0
 8000b58:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000c00 <timer_callback_routine+0xe4>
 8000b5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b64:	ee17 3a90 	vmov	r3, s15
 8000b68:	807b      	strh	r3, [r7, #2]
		int16_t comp_orient_z  = (int16_t)(get_IMU_orient_z() * 100);
 8000b6a:	f000 fef9 	bl	8001960 <get_IMU_orient_z>
 8000b6e:	eef0 7a40 	vmov.f32	s15, s0
 8000b72:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000c00 <timer_callback_routine+0xe4>
 8000b76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b7e:	ee17 3a90 	vmov	r3, s15
 8000b82:	803b      	strh	r3, [r7, #0]
		// Send compressed data through CAN bus
		CAN_TxData[0]  = (comp_enc_angle >> 8) & 0xFF;	//byte 0-1 (encoder angle)
 8000b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b88:	121b      	asrs	r3, r3, #8
 8000b8a:	b21b      	sxth	r3, r3
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <timer_callback_routine+0xe8>)
 8000b90:	701a      	strb	r2, [r3, #0]
		CAN_TxData[1]  = (comp_enc_angle >> 0) & 0xFF;
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <timer_callback_routine+0xe8>)
 8000b98:	705a      	strb	r2, [r3, #1]
		CAN_TxData[2]  = (comp_orient_x  >> 8) & 0xFF; 	//byte 2-3 (x axis angle)
 8000b9a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b9e:	121b      	asrs	r3, r3, #8
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <timer_callback_routine+0xe8>)
 8000ba6:	709a      	strb	r2, [r3, #2]
		CAN_TxData[3]  = (comp_orient_x  >> 0) & 0xFF;
 8000ba8:	88bb      	ldrh	r3, [r7, #4]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <timer_callback_routine+0xe8>)
 8000bae:	70da      	strb	r2, [r3, #3]
		CAN_TxData[4]  = (comp_orient_y  >> 8) & 0xFF; 	//byte 4-5 (y axis angle)
 8000bb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bb4:	121b      	asrs	r3, r3, #8
 8000bb6:	b21b      	sxth	r3, r3
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <timer_callback_routine+0xe8>)
 8000bbc:	711a      	strb	r2, [r3, #4]
		CAN_TxData[5]  = (comp_orient_y  >> 0) & 0xFF;
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <timer_callback_routine+0xe8>)
 8000bc4:	715a      	strb	r2, [r3, #5]
		CAN_TxData[6]  = (comp_orient_z  >> 8) & 0xFF; 	//byte 6-7 (z axis angle)
 8000bc6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bca:	121b      	asrs	r3, r3, #8
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <timer_callback_routine+0xe8>)
 8000bd2:	719a      	strb	r2, [r3, #6]
		CAN_TxData[7]  = (comp_orient_z  >> 0) & 0xFF;
 8000bd4:	883b      	ldrh	r3, [r7, #0]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <timer_callback_routine+0xe8>)
 8000bda:	71da      	strb	r2, [r3, #7]

		HAL_CAN_AddTxMessage(&hcan1, &CAN_TxHeader, CAN_TxData, &CAN_TxMailbox);
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <timer_callback_routine+0xec>)
 8000bde:	4a09      	ldr	r2, [pc, #36]	; (8000c04 <timer_callback_routine+0xe8>)
 8000be0:	490a      	ldr	r1, [pc, #40]	; (8000c0c <timer_callback_routine+0xf0>)
 8000be2:	480b      	ldr	r0, [pc, #44]	; (8000c10 <timer_callback_routine+0xf4>)
 8000be4:	f001 f971 	bl	8001eca <HAL_CAN_AddTxMessage>
		// Reset CAN bus RX message available flag
		JB203_data = 0;
	}

#endif
	HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <timer_callback_routine+0xe0>)
 8000bf0:	f002 f82e 	bl	8002c50 <HAL_GPIO_WritePin>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	48000400 	.word	0x48000400
 8000c00:	42c80000 	.word	0x42c80000
 8000c04:	20000138 	.word	0x20000138
 8000c08:	20000134 	.word	0x20000134
 8000c0c:	20000100 	.word	0x20000100
 8000c10:	20000028 	.word	0x20000028

08000c14 <footboard_main>:

void footboard_main(){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	// Start CAN bus
	CAN_bus_Init();
 8000c18:	f000 fb2e 	bl	8001278 <CAN_bus_Init>
	// Initialise IMU
	init_IMU();
 8000c1c:	f000 fbb8 	bl	8001390 <init_IMU>
	// Start timer callback (frequency = 1kHz)
	HAL_TIM_Base_Start_IT(&htim2);
 8000c20:	4801      	ldr	r0, [pc, #4]	; (8000c28 <footboard_main+0x14>)
 8000c22:	f003 fdf9 	bl	8004818 <HAL_TIM_Base_Start_IT>

	while (1);
 8000c26:	e7fe      	b.n	8000c26 <footboard_main+0x12>
 8000c28:	200000b4 	.word	0x200000b4

08000c2c <HAL_TIM_PeriodElapsedCallback>:
}

// Timer interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	timer_callback_routine();
 8000c34:	f7ff ff72 	bl	8000b1c <timer_callback_routine>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c44:	f000 fec3 	bl	80019ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c48:	f000 f80b 	bl	8000c62 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4c:	f000 f91e 	bl	8000e8c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000c50:	f000 f85a 	bl	8000d08 <MX_CAN1_Init>
  MX_SPI1_Init();
 8000c54:	f000 f88e 	bl	8000d74 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000c58:	f000 f8ca 	bl	8000df0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  footboard_main();
 8000c5c:	f7ff ffda 	bl	8000c14 <footboard_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <main+0x20>

08000c62 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b096      	sub	sp, #88	; 0x58
 8000c66:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2244      	movs	r2, #68	; 0x44
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f004 f9db 	bl	800502c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c76:	463b      	mov	r3, r7
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c84:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c88:	f002 f808 	bl	8002c9c <HAL_PWREx_ControlVoltageScaling>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c92:	f000 f9c5 	bl	8001020 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c96:	2310      	movs	r3, #16
 8000c98:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ca2:	2360      	movs	r3, #96	; 0x60
 8000ca4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000caa:	2301      	movs	r3, #1
 8000cac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000cb2:	2328      	movs	r3, #40	; 0x28
 8000cb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f002 f83e 	bl	8002d48 <HAL_RCC_OscConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000cd2:	f000 f9a5 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	2104      	movs	r1, #4
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f002 fc3e 	bl	8003570 <HAL_RCC_ClockConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000cfa:	f000 f991 	bl	8001020 <Error_Handler>
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3758      	adds	r7, #88	; 0x58
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d0e:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <MX_CAN1_Init+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000d12:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d14:	2210      	movs	r2, #16
 8000d16:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d2a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d32:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d58:	4804      	ldr	r0, [pc, #16]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d5a:	f000 fead 	bl	8001ab8 <HAL_CAN_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000d64:	f000 f95c 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000028 	.word	0x20000028
 8000d70:	40006400 	.word	0x40006400

08000d74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <MX_SPI1_Init+0x74>)
 8000d7a:	4a1c      	ldr	r2, [pc, #112]	; (8000dec <MX_SPI1_Init+0x78>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_SPI1_Init+0x74>)
 8000d80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <MX_SPI1_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <MX_SPI1_Init+0x74>)
 8000d8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d92:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_SPI1_Init+0x74>)
 8000d96:	2202      	movs	r2, #2
 8000d98:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d9a:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <MX_SPI1_Init+0x74>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_SPI1_Init+0x74>)
 8000da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_SPI1_Init+0x74>)
 8000daa:	2218      	movs	r2, #24
 8000dac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_SPI1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_SPI1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <MX_SPI1_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <MX_SPI1_Init+0x74>)
 8000dc2:	2207      	movs	r2, #7
 8000dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <MX_SPI1_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_SPI1_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_SPI1_Init+0x74>)
 8000dd4:	f002 fdb8 	bl	8003948 <HAL_SPI_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000dde:	f000 f91f 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000050 	.word	0x20000050
 8000dec:	40013000 	.word	0x40013000

08000df0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80000;
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e24:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <MX_TIM2_Init+0x98>)
 8000e26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e34:	4813      	ldr	r0, [pc, #76]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e36:	f003 fc97 	bl	8004768 <HAL_TIM_Base_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e40:	f000 f8ee 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e52:	f003 fe54 	bl	8004afe <HAL_TIM_ConfigClockSource>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e5c:	f000 f8e0 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e60:	2300      	movs	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e6e:	f004 f835 	bl	8004edc <HAL_TIMEx_MasterConfigSynchronization>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e78:	f000 f8d2 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200000b4 	.word	0x200000b4
 8000e88:	00013880 	.word	0x00013880

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea2:	4b5c      	ldr	r3, [pc, #368]	; (8001014 <MX_GPIO_Init+0x188>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	4a5b      	ldr	r2, [pc, #364]	; (8001014 <MX_GPIO_Init+0x188>)
 8000ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eae:	4b59      	ldr	r3, [pc, #356]	; (8001014 <MX_GPIO_Init+0x188>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	4b56      	ldr	r3, [pc, #344]	; (8001014 <MX_GPIO_Init+0x188>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a55      	ldr	r2, [pc, #340]	; (8001014 <MX_GPIO_Init+0x188>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b53      	ldr	r3, [pc, #332]	; (8001014 <MX_GPIO_Init+0x188>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b50      	ldr	r3, [pc, #320]	; (8001014 <MX_GPIO_Init+0x188>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a4f      	ldr	r2, [pc, #316]	; (8001014 <MX_GPIO_Init+0x188>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b4d      	ldr	r3, [pc, #308]	; (8001014 <MX_GPIO_Init+0x188>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	4b4a      	ldr	r3, [pc, #296]	; (8001014 <MX_GPIO_Init+0x188>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4a49      	ldr	r2, [pc, #292]	; (8001014 <MX_GPIO_Init+0x188>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4b47      	ldr	r3, [pc, #284]	; (8001014 <MX_GPIO_Init+0x188>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_nCS_GPIO_Port, IMU_nCS_Pin, GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2108      	movs	r1, #8
 8000f06:	4844      	ldr	r0, [pc, #272]	; (8001018 <MX_GPIO_Init+0x18c>)
 8000f08:	f001 fea2 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2108      	movs	r1, #8
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f001 fe9c 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f1e:	483f      	ldr	r0, [pc, #252]	; (800101c <MX_GPIO_Init+0x190>)
 8000f20:	f001 fe96 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_1_GPIO_Port, GPIO_1_Pin, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2e:	f001 fe8f 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_2_Pin|GPIO_3_Pin|GPIO_4_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000f38:	4837      	ldr	r0, [pc, #220]	; (8001018 <MX_GPIO_Init+0x18c>)
 8000f3a:	f001 fe89 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ADC_EXT2_Pin */
  GPIO_InitStruct.Pin = ADC_EXT2_Pin;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADC_EXT2_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	4831      	ldr	r0, [pc, #196]	; (8001018 <MX_GPIO_Init+0x18c>)
 8000f54:	f001 fd02 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_nCS_Pin */
  GPIO_InitStruct.Pin = IMU_nCS_Pin;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f64:	2302      	movs	r3, #2
 8000f66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_nCS_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	482a      	ldr	r0, [pc, #168]	; (8001018 <MX_GPIO_Init+0x18c>)
 8000f70:	f001 fcf4 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_EXT1_Pin */
  GPIO_InitStruct.Pin = ADC_EXT1_Pin;
 8000f74:	2304      	movs	r3, #4
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADC_EXT1_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8c:	f001 fce6 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_nCS_Pin */
  GPIO_InitStruct.Pin = ADC_nCS_Pin;
 8000f90:	2308      	movs	r3, #8
 8000f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000faa:	f001 fcd7 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_LED_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8000fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4815      	ldr	r0, [pc, #84]	; (800101c <MX_GPIO_Init+0x190>)
 8000fc8:	f001 fcc8 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_1_Pin */
  GPIO_InitStruct.Pin = GPIO_1_Pin;
 8000fcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_1_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe8:	f001 fcb8 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_2_Pin GPIO_3_Pin GPIO_4_Pin */
  GPIO_InitStruct.Pin = GPIO_2_Pin|GPIO_3_Pin|GPIO_4_Pin;
 8000fec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <MX_GPIO_Init+0x18c>)
 8001006:	f001 fca9 	bl	800295c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	48000800 	.word	0x48000800
 800101c:	48000400 	.word	0x48000400

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	e7fe      	b.n	8001028 <Error_Handler+0x8>
	...

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_MspInit+0x44>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001036:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <HAL_MspInit+0x44>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6613      	str	r3, [r2, #96]	; 0x60
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <HAL_MspInit+0x44>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <HAL_MspInit+0x44>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	4a08      	ldr	r2, [pc, #32]	; (8001070 <HAL_MspInit+0x44>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	6593      	str	r3, [r2, #88]	; 0x58
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_MspInit+0x44>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <HAL_CAN_MspInit+0x90>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d131      	bne.n	80010fa <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <HAL_CAN_MspInit+0x94>)
 8001098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109a:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <HAL_CAN_MspInit+0x94>)
 800109c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010a0:	6593      	str	r3, [r2, #88]	; 0x58
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <HAL_CAN_MspInit+0x94>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <HAL_CAN_MspInit+0x94>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a15      	ldr	r2, [pc, #84]	; (8001108 <HAL_CAN_MspInit+0x94>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <HAL_CAN_MspInit+0x94>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010d8:	2309      	movs	r3, #9
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f001 fc39 	bl	800295c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	2014      	movs	r0, #20
 80010f0:	f001 fbfd 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010f4:	2014      	movs	r0, #20
 80010f6:	f001 fc16 	bl	8002926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80010fa:	bf00      	nop
 80010fc:	3728      	adds	r7, #40	; 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40006400 	.word	0x40006400
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a17      	ldr	r2, [pc, #92]	; (8001188 <HAL_SPI_MspInit+0x7c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d128      	bne.n	8001180 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_SPI_MspInit+0x80>)
 8001130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001132:	4a16      	ldr	r2, [pc, #88]	; (800118c <HAL_SPI_MspInit+0x80>)
 8001134:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001138:	6613      	str	r3, [r2, #96]	; 0x60
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_SPI_MspInit+0x80>)
 800113c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_SPI_MspInit+0x80>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	4a10      	ldr	r2, [pc, #64]	; (800118c <HAL_SPI_MspInit+0x80>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HAL_SPI_MspInit+0x80>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800115e:	23c2      	movs	r3, #194	; 0xc2
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800116e:	2305      	movs	r3, #5
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117c:	f001 fbee 	bl	800295c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	; 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40013000 	.word	0x40013000
 800118c:	40021000 	.word	0x40021000

08001190 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a0:	d113      	bne.n	80011ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_TIM_Base_MspInit+0x44>)
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <HAL_TIM_Base_MspInit+0x44>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6593      	str	r3, [r2, #88]	; 0x58
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_TIM_Base_MspInit+0x44>)
 80011b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	201c      	movs	r0, #28
 80011c0:	f001 fb95 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011c4:	201c      	movs	r0, #28
 80011c6:	f001 fbae 	bl	8002926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000

080011d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <NMI_Handler+0x4>

080011de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <HardFault_Handler+0x4>

080011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <MemManage_Handler+0x4>

080011ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001224:	f000 fc28 	bl	8001a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <CAN1_RX0_IRQHandler+0x10>)
 8001232:	f001 f852 	bl	80022da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000028 	.word	0x20000028

08001240 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <TIM2_IRQHandler+0x10>)
 8001246:	f003 fb3b 	bl	80048c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200000b4 	.word	0x200000b4

08001254 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <SystemInit+0x20>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <SystemInit+0x20>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <CAN_bus_Init>:
int JB202_data = 0;
int JB203_data = 0;


void CAN_bus_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
	// CAN bus filter configuration
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800127e:	2301      	movs	r3, #1
 8001280:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800129e:	2301      	movs	r3, #1
 80012a0:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80012a6:	463b      	mov	r3, r7
 80012a8:	4619      	mov	r1, r3
 80012aa:	4819      	ldr	r0, [pc, #100]	; (8001310 <CAN_bus_Init+0x98>)
 80012ac:	f000 fcff 	bl	8001cae <HAL_CAN_ConfigFilter>

	// Start CAN bus
	HAL_CAN_Start(&hcan1);
 80012b0:	4817      	ldr	r0, [pc, #92]	; (8001310 <CAN_bus_Init+0x98>)
 80012b2:	f000 fdc6 	bl	8001e42 <HAL_CAN_Start>

	// Activate CAN message notification
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012b6:	2102      	movs	r1, #2
 80012b8:	4815      	ldr	r0, [pc, #84]	; (8001310 <CAN_bus_Init+0x98>)
 80012ba:	f000 ffe8 	bl	800228e <HAL_CAN_ActivateNotification>

	// set CAN arbitration and control field
	CAN_TxHeader.DLC = MESSAGE_SIZE_TX; 						// how many data bytes to be sent
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <CAN_bus_Init+0x9c>)
 80012c0:	2208      	movs	r2, #8
 80012c2:	611a      	str	r2, [r3, #16]
	CAN_TxHeader.ExtId = 0;
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <CAN_bus_Init+0x9c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	605a      	str	r2, [r3, #4]
	CAN_TxHeader.IDE = CAN_ID_STD;
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <CAN_bus_Init+0x9c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
	CAN_TxHeader.RTR = CAN_RTR_DATA;
 80012d0:	4b10      	ldr	r3, [pc, #64]	; (8001314 <CAN_bus_Init+0x9c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
	CAN_TxHeader.StdId = DEVICE_CAN_ID;
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <CAN_bus_Init+0x9c>)
 80012d8:	f240 2202 	movw	r2, #514	; 0x202
 80012dc:	601a      	str	r2, [r3, #0]
	CAN_TxHeader.TransmitGlobalTime = DISABLE;
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <CAN_bus_Init+0x9c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	751a      	strb	r2, [r3, #20]
	// Data to be sent
	CAN_TxData[0] = 0x00;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <CAN_bus_Init+0xa0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
	CAN_TxData[1] = 0x00;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <CAN_bus_Init+0xa0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	705a      	strb	r2, [r3, #1]
	CAN_TxData[2] = 0x00;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <CAN_bus_Init+0xa0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	709a      	strb	r2, [r3, #2]
	CAN_TxData[3] = 0x00;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <CAN_bus_Init+0xa0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	70da      	strb	r2, [r3, #3]
	//  CAN_TxData[5] = 0x00;
	//  CAN_TxData[6] = 0x00;
	//  CAN_TxData[7] = 0x00;

	// send the messages
	HAL_CAN_AddTxMessage(&hcan1, &CAN_TxHeader, CAN_TxData, &CAN_TxMailbox);
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <CAN_bus_Init+0xa4>)
 80012fe:	4a06      	ldr	r2, [pc, #24]	; (8001318 <CAN_bus_Init+0xa0>)
 8001300:	4904      	ldr	r1, [pc, #16]	; (8001314 <CAN_bus_Init+0x9c>)
 8001302:	4803      	ldr	r0, [pc, #12]	; (8001310 <CAN_bus_Init+0x98>)
 8001304:	f000 fde1 	bl	8001eca <HAL_CAN_AddTxMessage>
}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	; 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000028 	.word	0x20000028
 8001314:	20000100 	.word	0x20000100
 8001318:	20000138 	.word	0x20000138
 800131c:	20000134 	.word	0x20000134

08001320 <HAL_CAN_RxFifo0MsgPendingCallback>:

// CAN bus received message, Message pending callback to execute
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN_RxHeader, CAN_RxData);
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800132a:	4a16      	ldr	r2, [pc, #88]	; (8001384 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800132c:	2100      	movs	r1, #0
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 fe9b 	bl	800206a <HAL_CAN_GetRxMessage>
	// check size of received data and which device sent it
	if (CAN_RxHeader.DLC == MESSAGE_SIZE_RX && CAN_RxHeader.StdId == JB202)   						// how many data bytes to receive
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	2b08      	cmp	r3, #8
 800133a:	d10c      	bne.n	8001356 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f240 2202 	movw	r2, #514	; 0x202
 8001344:	4293      	cmp	r3, r2
 8001346:	d106      	bne.n	8001356 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
	{
		JB202_data = 1;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]
		JB203_data = 0;
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
	else if (CAN_RxHeader.DLC == MESSAGE_SIZE_RX && CAN_RxHeader.StdId == JB203)   						// how many data bytes to receive
	{
		JB203_data = 1;
		JB202_data = 0;
	}
}
 8001354:	e00f      	b.n	8001376 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
	else if (CAN_RxHeader.DLC == MESSAGE_SIZE_RX && CAN_RxHeader.StdId == JB203)   						// how many data bytes to receive
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	2b08      	cmp	r3, #8
 800135c:	d10b      	bne.n	8001376 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f240 2203 	movw	r2, #515	; 0x203
 8001366:	4293      	cmp	r3, r2
 8001368:	d105      	bne.n	8001376 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
		JB203_data = 1;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]
		JB202_data = 0;
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000140 	.word	0x20000140
 8001384:	20000118 	.word	0x20000118
 8001388:	20000148 	.word	0x20000148
 800138c:	2000014c 	.word	0x2000014c

08001390 <init_IMU>:
// define write register
const uint8_t PWR_MGMT0 	= 0x1F | 0x00;		// GYRO_DATA_Z[7:0]

uint8_t spi_buf[12];

void init_IMU(){
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
	// set CS to high
	HAL_GPIO_WritePin(IMU_nCS_GPIO_Port, IMU_nCS_Pin, GPIO_PIN_SET);
 8001396:	2201      	movs	r2, #1
 8001398:	2108      	movs	r1, #8
 800139a:	483d      	ldr	r0, [pc, #244]	; (8001490 <init_IMU+0x100>)
 800139c:	f001 fc58 	bl	8002c50 <HAL_GPIO_WritePin>
	// turn accelerometer and gyroscope ON in low-noise mode
	uint8_t write_reg[2];
	write_reg[0] = PWR_MGMT0; 	// address
 80013a0:	231f      	movs	r3, #31
 80013a2:	713b      	strb	r3, [r7, #4]
	write_reg[1] = 0b01001111;	// set accel. and gyro. in Low noise mode
 80013a4:	234f      	movs	r3, #79	; 0x4f
 80013a6:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(IMU_nCS_GPIO_Port, IMU_nCS_Pin, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2108      	movs	r1, #8
 80013ac:	4838      	ldr	r0, [pc, #224]	; (8001490 <init_IMU+0x100>)
 80013ae:	f001 fc4f 	bl	8002c50 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, write_reg, 2, 10);
 80013b2:	1d39      	adds	r1, r7, #4
 80013b4:	230a      	movs	r3, #10
 80013b6:	2202      	movs	r2, #2
 80013b8:	4836      	ldr	r0, [pc, #216]	; (8001494 <init_IMU+0x104>)
 80013ba:	f002 fb68 	bl	8003a8e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(IMU_nCS_GPIO_Port, IMU_nCS_Pin, GPIO_PIN_SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	2108      	movs	r1, #8
 80013c2:	4833      	ldr	r0, [pc, #204]	; (8001490 <init_IMU+0x100>)
 80013c4:	f001 fc44 	bl	8002c50 <HAL_GPIO_WritePin>

	// initialise vectors
	accel.x = 0.0;
 80013c8:	4b33      	ldr	r3, [pc, #204]	; (8001498 <init_IMU+0x108>)
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
	accel.y = 0.0;
 80013d0:	4b31      	ldr	r3, [pc, #196]	; (8001498 <init_IMU+0x108>)
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	605a      	str	r2, [r3, #4]
	accel.z = 0.0;
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <init_IMU+0x108>)
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	609a      	str	r2, [r3, #8]

	gyro.x = 0.0;
 80013e0:	4b2e      	ldr	r3, [pc, #184]	; (800149c <init_IMU+0x10c>)
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
	gyro.y = 0.0;
 80013e8:	4b2c      	ldr	r3, [pc, #176]	; (800149c <init_IMU+0x10c>)
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
	gyro.z = 0.0;
 80013f0:	4b2a      	ldr	r3, [pc, #168]	; (800149c <init_IMU+0x10c>)
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]

	orientation.x = 0.0;
 80013f8:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <init_IMU+0x110>)
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
	orientation.y = 0.0;
 8001400:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <init_IMU+0x110>)
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	605a      	str	r2, [r3, #4]
	orientation.z = 0.0;
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <init_IMU+0x110>)
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	609a      	str	r2, [r3, #8]

	prev_orientation.x = 0.0;
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <init_IMU+0x114>)
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
	prev_orientation.y = 0.0;
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <init_IMU+0x114>)
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	605a      	str	r2, [r3, #4]
	prev_orientation.z = 0.0;
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <init_IMU+0x114>)
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	609a      	str	r2, [r3, #8]

	accel_orient.x = 0.0;
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <init_IMU+0x118>)
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
	accel_orient.y = 0.0;
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <init_IMU+0x118>)
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
	accel_orient.z = 0.0;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <init_IMU+0x118>)
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	609a      	str	r2, [r3, #8]

	gyro_orient.x = 0.0;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <init_IMU+0x11c>)
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
	gyro_orient.y = 0.0;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <init_IMU+0x11c>)
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
	gyro_orient.z = 0.0;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <init_IMU+0x11c>)
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	609a      	str	r2, [r3, #8]

	prev_accel_orient.x = 0.0;
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <init_IMU+0x120>)
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
	prev_accel_orient.y = 0.0;
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <init_IMU+0x120>)
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
	prev_accel_orient.z = 0.0;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <init_IMU+0x120>)
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	609a      	str	r2, [r3, #8]

	prev_gyro_orient.x = 0.0;
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <init_IMU+0x124>)
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
	prev_gyro_orient.y = 0.0;
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <init_IMU+0x124>)
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
	prev_gyro_orient.z = 0.0;
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <init_IMU+0x124>)
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	609a      	str	r2, [r3, #8]

}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	48000800 	.word	0x48000800
 8001494:	20000050 	.word	0x20000050
 8001498:	20000150 	.word	0x20000150
 800149c:	2000015c 	.word	0x2000015c
 80014a0:	20000168 	.word	0x20000168
 80014a4:	20000174 	.word	0x20000174
 80014a8:	20000180 	.word	0x20000180
 80014ac:	2000018c 	.word	0x2000018c
 80014b0:	20000198 	.word	0x20000198
 80014b4:	200001a4 	.word	0x200001a4

080014b8 <update_IMU_data>:

void update_IMU_data(){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	// request data from accelerometer
	//HAL_GPIO_WritePin(ADC_nCS_GPIO_Port, ADC_nCS_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(IMU_nCS_GPIO_Port, IMU_nCS_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2108      	movs	r1, #8
 80014c0:	485f      	ldr	r0, [pc, #380]	; (8001640 <update_IMU_data+0x188>)
 80014c2:	f001 fbc5 	bl	8002c50 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&ACCEL_DATA_X1, 1, 1000);
 80014c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ca:	2201      	movs	r2, #1
 80014cc:	495d      	ldr	r1, [pc, #372]	; (8001644 <update_IMU_data+0x18c>)
 80014ce:	485e      	ldr	r0, [pc, #376]	; (8001648 <update_IMU_data+0x190>)
 80014d0:	f002 fadd 	bl	8003a8e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 12, 1000);
 80014d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d8:	220c      	movs	r2, #12
 80014da:	495c      	ldr	r1, [pc, #368]	; (800164c <update_IMU_data+0x194>)
 80014dc:	485a      	ldr	r0, [pc, #360]	; (8001648 <update_IMU_data+0x190>)
 80014de:	f002 fc44 	bl	8003d6a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(IMU_nCS_GPIO_Port, IMU_nCS_Pin, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	2108      	movs	r1, #8
 80014e6:	4856      	ldr	r0, [pc, #344]	; (8001640 <update_IMU_data+0x188>)
 80014e8:	f001 fbb2 	bl	8002c50 <HAL_GPIO_WritePin>
	// parse data to accelerometer vector
	accel.x =  (float)(int16_t)(spi_buf[0] << 8 | spi_buf[1])  / FS11B; // FS11B used for 16g scale
 80014ec:	4b57      	ldr	r3, [pc, #348]	; (800164c <update_IMU_data+0x194>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	4b55      	ldr	r3, [pc, #340]	; (800164c <update_IMU_data+0x194>)
 80014f6:	785b      	ldrb	r3, [r3, #1]
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	ee07 3a90 	vmov	s15, r3
 8001502:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001506:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001650 <update_IMU_data+0x198>
 800150a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150e:	4b51      	ldr	r3, [pc, #324]	; (8001654 <update_IMU_data+0x19c>)
 8001510:	edc3 7a00 	vstr	s15, [r3]
	accel.y =  (float)(int16_t)(spi_buf[2] << 8 | spi_buf[3])  / FS11B;
 8001514:	4b4d      	ldr	r3, [pc, #308]	; (800164c <update_IMU_data+0x194>)
 8001516:	789b      	ldrb	r3, [r3, #2]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	b21a      	sxth	r2, r3
 800151c:	4b4b      	ldr	r3, [pc, #300]	; (800164c <update_IMU_data+0x194>)
 800151e:	78db      	ldrb	r3, [r3, #3]
 8001520:	b21b      	sxth	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	b21b      	sxth	r3, r3
 8001526:	ee07 3a90 	vmov	s15, r3
 800152a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800152e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001650 <update_IMU_data+0x198>
 8001532:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001536:	4b47      	ldr	r3, [pc, #284]	; (8001654 <update_IMU_data+0x19c>)
 8001538:	edc3 7a01 	vstr	s15, [r3, #4]
	accel.z = -(float)(int16_t)(spi_buf[4] << 8 | spi_buf[5])  / FS11B;
 800153c:	4b43      	ldr	r3, [pc, #268]	; (800164c <update_IMU_data+0x194>)
 800153e:	791b      	ldrb	r3, [r3, #4]
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	b21a      	sxth	r2, r3
 8001544:	4b41      	ldr	r3, [pc, #260]	; (800164c <update_IMU_data+0x194>)
 8001546:	795b      	ldrb	r3, [r3, #5]
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21b      	sxth	r3, r3
 800154e:	ee07 3a90 	vmov	s15, r3
 8001552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001556:	eeb1 7a67 	vneg.f32	s14, s15
 800155a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001650 <update_IMU_data+0x198>
 800155e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001562:	4b3c      	ldr	r3, [pc, #240]	; (8001654 <update_IMU_data+0x19c>)
 8001564:	edc3 7a02 	vstr	s15, [r3, #8]
	// parse data to gyroscope vector
	gyro.x = -(float)(int16_t)(spi_buf[6]  << 8 | spi_buf[7])  / 16.4; // 16.4 used for 200dps scale
 8001568:	4b38      	ldr	r3, [pc, #224]	; (800164c <update_IMU_data+0x194>)
 800156a:	799b      	ldrb	r3, [r3, #6]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	b21a      	sxth	r2, r3
 8001570:	4b36      	ldr	r3, [pc, #216]	; (800164c <update_IMU_data+0x194>)
 8001572:	79db      	ldrb	r3, [r3, #7]
 8001574:	b21b      	sxth	r3, r3
 8001576:	4313      	orrs	r3, r2
 8001578:	b21b      	sxth	r3, r3
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001582:	eef1 7a67 	vneg.f32	s15, s15
 8001586:	ee17 3a90 	vmov	r3, s15
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ff84 	bl	8000498 <__aeabi_f2d>
 8001590:	a329      	add	r3, pc, #164	; (adr r3, 8001638 <update_IMU_data+0x180>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7ff f901 	bl	800079c <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff fa6b 	bl	8000a7c <__aeabi_d2f>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4a2b      	ldr	r2, [pc, #172]	; (8001658 <update_IMU_data+0x1a0>)
 80015aa:	6013      	str	r3, [r2, #0]
	gyro.y = -(float)(int16_t)(spi_buf[8]  << 8 | spi_buf[9])  / 16.4;
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <update_IMU_data+0x194>)
 80015ae:	7a1b      	ldrb	r3, [r3, #8]
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	4b25      	ldr	r3, [pc, #148]	; (800164c <update_IMU_data+0x194>)
 80015b6:	7a5b      	ldrb	r3, [r3, #9]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21b      	sxth	r3, r3
 80015be:	ee07 3a90 	vmov	s15, r3
 80015c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c6:	eef1 7a67 	vneg.f32	s15, s15
 80015ca:	ee17 3a90 	vmov	r3, s15
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ff62 	bl	8000498 <__aeabi_f2d>
 80015d4:	a318      	add	r3, pc, #96	; (adr r3, 8001638 <update_IMU_data+0x180>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff f8df 	bl	800079c <__aeabi_ddiv>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	f7ff fa49 	bl	8000a7c <__aeabi_d2f>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4a1a      	ldr	r2, [pc, #104]	; (8001658 <update_IMU_data+0x1a0>)
 80015ee:	6053      	str	r3, [r2, #4]
	gyro.z =  (float)(int16_t)(spi_buf[10] << 8 | spi_buf[11]) / 16.4;
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <update_IMU_data+0x194>)
 80015f2:	7a9b      	ldrb	r3, [r3, #10]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <update_IMU_data+0x194>)
 80015fa:	7adb      	ldrb	r3, [r3, #11]
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	4313      	orrs	r3, r2
 8001600:	b21b      	sxth	r3, r3
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160a:	ee17 0a90 	vmov	r0, s15
 800160e:	f7fe ff43 	bl	8000498 <__aeabi_f2d>
 8001612:	a309      	add	r3, pc, #36	; (adr r3, 8001638 <update_IMU_data+0x180>)
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	f7ff f8c0 	bl	800079c <__aeabi_ddiv>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fa2a 	bl	8000a7c <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <update_IMU_data+0x1a0>)
 800162c:	6093      	str	r3, [r2, #8]
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	f3af 8000 	nop.w
 8001638:	66666666 	.word	0x66666666
 800163c:	40306666 	.word	0x40306666
 8001640:	48000800 	.word	0x48000800
 8001644:	08005588 	.word	0x08005588
 8001648:	20000050 	.word	0x20000050
 800164c:	200001b0 	.word	0x200001b0
 8001650:	45000000 	.word	0x45000000
 8001654:	20000150 	.word	0x20000150
 8001658:	2000015c 	.word	0x2000015c
 800165c:	00000000 	.word	0x00000000

08001660 <update_IMU_orient_data>:

void update_IMU_orient_data(){
 8001660:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001664:	af00      	add	r7, sp, #0
	// update IMU_data
	update_IMU_data();
 8001666:	f7ff ff27 	bl	80014b8 <update_IMU_data>
#if ORIENTATION_FILTER == USE_FILTER_COMPLEMENTARY
	// orientation from accelerometer
	accel_orient.x =  atan2(accel.y, accel.z) * 180 / M_PI;
 800166a:	4ba3      	ldr	r3, [pc, #652]	; (80018f8 <update_IMU_orient_data+0x298>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff12 	bl	8000498 <__aeabi_f2d>
 8001674:	4680      	mov	r8, r0
 8001676:	4689      	mov	r9, r1
 8001678:	4b9f      	ldr	r3, [pc, #636]	; (80018f8 <update_IMU_orient_data+0x298>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff0b 	bl	8000498 <__aeabi_f2d>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	ec43 2b11 	vmov	d1, r2, r3
 800168a:	ec49 8b10 	vmov	d0, r8, r9
 800168e:	f003 fcd5 	bl	800503c <atan2>
 8001692:	ec51 0b10 	vmov	r0, r1, d0
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	4b98      	ldr	r3, [pc, #608]	; (80018fc <update_IMU_orient_data+0x29c>)
 800169c:	f7fe ff54 	bl	8000548 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	a391      	add	r3, pc, #580	; (adr r3, 80018f0 <update_IMU_orient_data+0x290>)
 80016aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ae:	f7ff f875 	bl	800079c <__aeabi_ddiv>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f7ff f9df 	bl	8000a7c <__aeabi_d2f>
 80016be:	4603      	mov	r3, r0
 80016c0:	4a8f      	ldr	r2, [pc, #572]	; (8001900 <update_IMU_orient_data+0x2a0>)
 80016c2:	6013      	str	r3, [r2, #0]
	accel_orient.y = -atan2(accel.x, accel.z) * 180 / M_PI;
 80016c4:	4b8c      	ldr	r3, [pc, #560]	; (80018f8 <update_IMU_orient_data+0x298>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe fee5 	bl	8000498 <__aeabi_f2d>
 80016ce:	4680      	mov	r8, r0
 80016d0:	4689      	mov	r9, r1
 80016d2:	4b89      	ldr	r3, [pc, #548]	; (80018f8 <update_IMU_orient_data+0x298>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe fede 	bl	8000498 <__aeabi_f2d>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	ec43 2b11 	vmov	d1, r2, r3
 80016e4:	ec49 8b10 	vmov	d0, r8, r9
 80016e8:	f003 fca8 	bl	800503c <atan2>
 80016ec:	ec53 2b10 	vmov	r2, r3, d0
 80016f0:	4614      	mov	r4, r2
 80016f2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	4b80      	ldr	r3, [pc, #512]	; (80018fc <update_IMU_orient_data+0x29c>)
 80016fc:	4620      	mov	r0, r4
 80016fe:	4629      	mov	r1, r5
 8001700:	f7fe ff22 	bl	8000548 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	a378      	add	r3, pc, #480	; (adr r3, 80018f0 <update_IMU_orient_data+0x290>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f7ff f843 	bl	800079c <__aeabi_ddiv>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff f9ad 	bl	8000a7c <__aeabi_d2f>
 8001722:	4603      	mov	r3, r0
 8001724:	4a76      	ldr	r2, [pc, #472]	; (8001900 <update_IMU_orient_data+0x2a0>)
 8001726:	6053      	str	r3, [r2, #4]
	accel_orient.z =  atan2(accel.x, accel.y) * 180 / M_PI;
 8001728:	4b73      	ldr	r3, [pc, #460]	; (80018f8 <update_IMU_orient_data+0x298>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe feb3 	bl	8000498 <__aeabi_f2d>
 8001732:	4604      	mov	r4, r0
 8001734:	460d      	mov	r5, r1
 8001736:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <update_IMU_orient_data+0x298>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe feac 	bl	8000498 <__aeabi_f2d>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	ec43 2b11 	vmov	d1, r2, r3
 8001748:	ec45 4b10 	vmov	d0, r4, r5
 800174c:	f003 fc76 	bl	800503c <atan2>
 8001750:	ec51 0b10 	vmov	r0, r1, d0
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <update_IMU_orient_data+0x29c>)
 800175a:	f7fe fef5 	bl	8000548 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	a362      	add	r3, pc, #392	; (adr r3, 80018f0 <update_IMU_orient_data+0x290>)
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	f7ff f816 	bl	800079c <__aeabi_ddiv>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	f7ff f980 	bl	8000a7c <__aeabi_d2f>
 800177c:	4603      	mov	r3, r0
 800177e:	4a60      	ldr	r2, [pc, #384]	; (8001900 <update_IMU_orient_data+0x2a0>)
 8001780:	6093      	str	r3, [r2, #8]

	// update previous values
	prev_accel_orient.x = accel_orient.x;
 8001782:	4b5f      	ldr	r3, [pc, #380]	; (8001900 <update_IMU_orient_data+0x2a0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a5f      	ldr	r2, [pc, #380]	; (8001904 <update_IMU_orient_data+0x2a4>)
 8001788:	6013      	str	r3, [r2, #0]
	prev_accel_orient.y = accel_orient.y;
 800178a:	4b5d      	ldr	r3, [pc, #372]	; (8001900 <update_IMU_orient_data+0x2a0>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4a5d      	ldr	r2, [pc, #372]	; (8001904 <update_IMU_orient_data+0x2a4>)
 8001790:	6053      	str	r3, [r2, #4]
	prev_accel_orient.z = accel_orient.z;
 8001792:	4b5b      	ldr	r3, [pc, #364]	; (8001900 <update_IMU_orient_data+0x2a0>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	4a5b      	ldr	r2, [pc, #364]	; (8001904 <update_IMU_orient_data+0x2a4>)
 8001798:	6093      	str	r3, [r2, #8]

	// orientation from gyroscope
	gyro_orient.x = CALL_BACK_DT * gyro.x + prev_gyro_orient.x;
 800179a:	4b5b      	ldr	r3, [pc, #364]	; (8001908 <update_IMU_orient_data+0x2a8>)
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800190c <update_IMU_orient_data+0x2ac>
 80017a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017a8:	4b59      	ldr	r3, [pc, #356]	; (8001910 <update_IMU_orient_data+0x2b0>)
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b2:	4b58      	ldr	r3, [pc, #352]	; (8001914 <update_IMU_orient_data+0x2b4>)
 80017b4:	edc3 7a00 	vstr	s15, [r3]
	gyro_orient.y = CALL_BACK_DT * gyro.y + prev_gyro_orient.y;
 80017b8:	4b53      	ldr	r3, [pc, #332]	; (8001908 <update_IMU_orient_data+0x2a8>)
 80017ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80017be:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800190c <update_IMU_orient_data+0x2ac>
 80017c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017c6:	4b52      	ldr	r3, [pc, #328]	; (8001910 <update_IMU_orient_data+0x2b0>)
 80017c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80017cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d0:	4b50      	ldr	r3, [pc, #320]	; (8001914 <update_IMU_orient_data+0x2b4>)
 80017d2:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_orient.z = CALL_BACK_DT * gyro.z + prev_gyro_orient.z;
 80017d6:	4b4c      	ldr	r3, [pc, #304]	; (8001908 <update_IMU_orient_data+0x2a8>)
 80017d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80017dc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800190c <update_IMU_orient_data+0x2ac>
 80017e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017e4:	4b4a      	ldr	r3, [pc, #296]	; (8001910 <update_IMU_orient_data+0x2b0>)
 80017e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80017ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ee:	4b49      	ldr	r3, [pc, #292]	; (8001914 <update_IMU_orient_data+0x2b4>)
 80017f0:	edc3 7a02 	vstr	s15, [r3, #8]

	// complementary filter
	orientation.x = alpha * (prev_orientation.x + CALL_BACK_DT * gyro.x) + beta * accel_orient.x;
 80017f4:	4b48      	ldr	r3, [pc, #288]	; (8001918 <update_IMU_orient_data+0x2b8>)
 80017f6:	ed93 7a00 	vldr	s14, [r3]
 80017fa:	4b43      	ldr	r3, [pc, #268]	; (8001908 <update_IMU_orient_data+0x2a8>)
 80017fc:	edd3 7a00 	vldr	s15, [r3]
 8001800:	eddf 6a42 	vldr	s13, [pc, #264]	; 800190c <update_IMU_orient_data+0x2ac>
 8001804:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800191c <update_IMU_orient_data+0x2bc>
 8001810:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001814:	4b3a      	ldr	r3, [pc, #232]	; (8001900 <update_IMU_orient_data+0x2a0>)
 8001816:	edd3 7a00 	vldr	s15, [r3]
 800181a:	eddf 6a41 	vldr	s13, [pc, #260]	; 8001920 <update_IMU_orient_data+0x2c0>
 800181e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <update_IMU_orient_data+0x2c4>)
 8001828:	edc3 7a00 	vstr	s15, [r3]
	orientation.y = alpha * (prev_orientation.y + CALL_BACK_DT * gyro.y) + beta * accel_orient.y;
 800182c:	4b3a      	ldr	r3, [pc, #232]	; (8001918 <update_IMU_orient_data+0x2b8>)
 800182e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001832:	4b35      	ldr	r3, [pc, #212]	; (8001908 <update_IMU_orient_data+0x2a8>)
 8001834:	edd3 7a01 	vldr	s15, [r3, #4]
 8001838:	eddf 6a34 	vldr	s13, [pc, #208]	; 800190c <update_IMU_orient_data+0x2ac>
 800183c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001844:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800191c <update_IMU_orient_data+0x2bc>
 8001848:	ee27 7a87 	vmul.f32	s14, s15, s14
 800184c:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <update_IMU_orient_data+0x2a0>)
 800184e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001852:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001920 <update_IMU_orient_data+0x2c0>
 8001856:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800185a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185e:	4b31      	ldr	r3, [pc, #196]	; (8001924 <update_IMU_orient_data+0x2c4>)
 8001860:	edc3 7a01 	vstr	s15, [r3, #4]
	orientation.z = alpha * (prev_orientation.z + CALL_BACK_DT * gyro.z) + beta * accel_orient.z;
 8001864:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <update_IMU_orient_data+0x2b8>)
 8001866:	ed93 7a02 	vldr	s14, [r3, #8]
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <update_IMU_orient_data+0x2a8>)
 800186c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001870:	eddf 6a26 	vldr	s13, [pc, #152]	; 800190c <update_IMU_orient_data+0x2ac>
 8001874:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800191c <update_IMU_orient_data+0x2bc>
 8001880:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <update_IMU_orient_data+0x2a0>)
 8001886:	edd3 7a02 	vldr	s15, [r3, #8]
 800188a:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001920 <update_IMU_orient_data+0x2c0>
 800188e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <update_IMU_orient_data+0x2c4>)
 8001898:	edc3 7a02 	vstr	s15, [r3, #8]

	// update previous values
	prev_accel_orient.x = accel_orient.x;
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <update_IMU_orient_data+0x2a0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a18      	ldr	r2, [pc, #96]	; (8001904 <update_IMU_orient_data+0x2a4>)
 80018a2:	6013      	str	r3, [r2, #0]
	prev_accel_orient.y = accel_orient.y;
 80018a4:	4b16      	ldr	r3, [pc, #88]	; (8001900 <update_IMU_orient_data+0x2a0>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	4a16      	ldr	r2, [pc, #88]	; (8001904 <update_IMU_orient_data+0x2a4>)
 80018aa:	6053      	str	r3, [r2, #4]
	prev_accel_orient.z = accel_orient.z;
 80018ac:	4b14      	ldr	r3, [pc, #80]	; (8001900 <update_IMU_orient_data+0x2a0>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4a14      	ldr	r2, [pc, #80]	; (8001904 <update_IMU_orient_data+0x2a4>)
 80018b2:	6093      	str	r3, [r2, #8]

	prev_gyro_orient.x = gyro_orient.x;
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <update_IMU_orient_data+0x2b4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a15      	ldr	r2, [pc, #84]	; (8001910 <update_IMU_orient_data+0x2b0>)
 80018ba:	6013      	str	r3, [r2, #0]
	prev_gyro_orient.y = gyro_orient.y;
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <update_IMU_orient_data+0x2b4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	4a13      	ldr	r2, [pc, #76]	; (8001910 <update_IMU_orient_data+0x2b0>)
 80018c2:	6053      	str	r3, [r2, #4]
	prev_gyro_orient.z = gyro_orient.z;
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <update_IMU_orient_data+0x2b4>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a11      	ldr	r2, [pc, #68]	; (8001910 <update_IMU_orient_data+0x2b0>)
 80018ca:	6093      	str	r3, [r2, #8]

	prev_orientation.x = orientation.x;
 80018cc:	4b15      	ldr	r3, [pc, #84]	; (8001924 <update_IMU_orient_data+0x2c4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a11      	ldr	r2, [pc, #68]	; (8001918 <update_IMU_orient_data+0x2b8>)
 80018d2:	6013      	str	r3, [r2, #0]
	prev_orientation.y = orientation.y;
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <update_IMU_orient_data+0x2c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	4a0f      	ldr	r2, [pc, #60]	; (8001918 <update_IMU_orient_data+0x2b8>)
 80018da:	6053      	str	r3, [r2, #4]
	prev_orientation.z = orientation.z;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <update_IMU_orient_data+0x2c4>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <update_IMU_orient_data+0x2b8>)
 80018e2:	6093      	str	r3, [r2, #8]
	// parse data orientation vector
	orientation.x = 0.0;
	orientation.y = 0.0;
	orientation.z = 0.0;
#endif
}
 80018e4:	bf00      	nop
 80018e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018ea:	bf00      	nop
 80018ec:	f3af 8000 	nop.w
 80018f0:	54442d18 	.word	0x54442d18
 80018f4:	400921fb 	.word	0x400921fb
 80018f8:	20000150 	.word	0x20000150
 80018fc:	40668000 	.word	0x40668000
 8001900:	20000180 	.word	0x20000180
 8001904:	20000198 	.word	0x20000198
 8001908:	2000015c 	.word	0x2000015c
 800190c:	3a83126f 	.word	0x3a83126f
 8001910:	200001a4 	.word	0x200001a4
 8001914:	2000018c 	.word	0x2000018c
 8001918:	20000174 	.word	0x20000174
 800191c:	3f7ae148 	.word	0x3f7ae148
 8001920:	3ca3d700 	.word	0x3ca3d700
 8001924:	20000168 	.word	0x20000168

08001928 <get_IMU_orient_x>:

float get_IMU_orient_x(){
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
	return orientation.x;
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <get_IMU_orient_x+0x18>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	ee07 3a90 	vmov	s15, r3
}
 8001934:	eeb0 0a67 	vmov.f32	s0, s15
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	20000168 	.word	0x20000168

08001944 <get_IMU_orient_y>:
float get_IMU_orient_y(){
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
	return orientation.y;
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <get_IMU_orient_y+0x18>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	ee07 3a90 	vmov	s15, r3
}
 8001950:	eeb0 0a67 	vmov.f32	s0, s15
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	20000168 	.word	0x20000168

08001960 <get_IMU_orient_z>:
float get_IMU_orient_z(){
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
	return orientation.z;
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <get_IMU_orient_z+0x18>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	ee07 3a90 	vmov	s15, r3
}
 800196c:	eeb0 0a67 	vmov.f32	s0, s15
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	20000168 	.word	0x20000168

0800197c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800197c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001980:	f7ff fc68 	bl	8001254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001984:	480c      	ldr	r0, [pc, #48]	; (80019b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001986:	490d      	ldr	r1, [pc, #52]	; (80019bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001988:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <LoopForever+0xe>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800199c:	4c0a      	ldr	r4, [pc, #40]	; (80019c8 <LoopForever+0x16>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019aa:	f003 fb1b 	bl	8004fe4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ae:	f7ff f947 	bl	8000c40 <main>

080019b2 <LoopForever>:

LoopForever:
    b LoopForever
 80019b2:	e7fe      	b.n	80019b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019c0:	08005608 	.word	0x08005608
  ldr r2, =_sbss
 80019c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80019c8:	200001c0 	.word	0x200001c0

080019cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC1_IRQHandler>

080019ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d8:	2003      	movs	r0, #3
 80019da:	f000 ff7d 	bl	80028d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019de:	200f      	movs	r0, #15
 80019e0:	f000 f80e 	bl	8001a00 <HAL_InitTick>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d002      	beq.n	80019f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	71fb      	strb	r3, [r7, #7]
 80019ee:	e001      	b.n	80019f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019f0:	f7ff fb1c 	bl	800102c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019f4:	79fb      	ldrb	r3, [r7, #7]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_InitTick+0x6c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d023      	beq.n	8001a5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <HAL_InitTick+0x70>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <HAL_InitTick+0x6c>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 ff89 	bl	8002942 <HAL_SYSTICK_Config>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10f      	bne.n	8001a56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b0f      	cmp	r3, #15
 8001a3a:	d809      	bhi.n	8001a50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f000 ff53 	bl	80028ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a48:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <HAL_InitTick+0x74>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e007      	b.n	8001a60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e004      	b.n	8001a60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	73fb      	strb	r3, [r7, #15]
 8001a5a:	e001      	b.n	8001a60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000004 	.word	0x20000004

08001a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x20>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x24>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_IncTick+0x24>)
 8001a8a:	6013      	str	r3, [r2, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	200001bc 	.word	0x200001bc

08001aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_GetTick+0x14>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	200001bc 	.word	0x200001bc

08001ab8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e0ed      	b.n	8001ca6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d102      	bne.n	8001adc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff facc 	bl	8001074 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aec:	f7ff ffd8 	bl	8001aa0 <HAL_GetTick>
 8001af0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001af2:	e012      	b.n	8001b1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001af4:	f7ff ffd4 	bl	8001aa0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b0a      	cmp	r3, #10
 8001b00:	d90b      	bls.n	8001b1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2205      	movs	r2, #5
 8001b12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e0c5      	b.n	8001ca6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0e5      	beq.n	8001af4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0202 	bic.w	r2, r2, #2
 8001b36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b38:	f7ff ffb2 	bl	8001aa0 <HAL_GetTick>
 8001b3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b3e:	e012      	b.n	8001b66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b40:	f7ff ffae 	bl	8001aa0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b0a      	cmp	r3, #10
 8001b4c:	d90b      	bls.n	8001b66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2205      	movs	r2, #5
 8001b5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e09f      	b.n	8001ca6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1e5      	bne.n	8001b40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7e1b      	ldrb	r3, [r3, #24]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d108      	bne.n	8001b8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e007      	b.n	8001b9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7e5b      	ldrb	r3, [r3, #25]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d108      	bne.n	8001bb8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	e007      	b.n	8001bc8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7e9b      	ldrb	r3, [r3, #26]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d108      	bne.n	8001be2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0220 	orr.w	r2, r2, #32
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	e007      	b.n	8001bf2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0220 	bic.w	r2, r2, #32
 8001bf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7edb      	ldrb	r3, [r3, #27]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d108      	bne.n	8001c0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0210 	bic.w	r2, r2, #16
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	e007      	b.n	8001c1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0210 	orr.w	r2, r2, #16
 8001c1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	7f1b      	ldrb	r3, [r3, #28]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d108      	bne.n	8001c36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0208 	orr.w	r2, r2, #8
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	e007      	b.n	8001c46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0208 	bic.w	r2, r2, #8
 8001c44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7f5b      	ldrb	r3, [r3, #29]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d108      	bne.n	8001c60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 0204 	orr.w	r2, r2, #4
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e007      	b.n	8001c70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0204 	bic.w	r2, r2, #4
 8001c6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	ea42 0103 	orr.w	r1, r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	1e5a      	subs	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b087      	sub	sp, #28
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001cc6:	7cfb      	ldrb	r3, [r7, #19]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d003      	beq.n	8001cd4 <HAL_CAN_ConfigFilter+0x26>
 8001ccc:	7cfb      	ldrb	r3, [r7, #19]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	f040 80aa 	bne.w	8001e28 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cda:	f043 0201 	orr.w	r2, r3, #1
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	2201      	movs	r2, #1
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d123      	bne.n	8001d56 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	401a      	ands	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d30:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3248      	adds	r2, #72	; 0x48
 8001d36:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d4c:	6979      	ldr	r1, [r7, #20]
 8001d4e:	3348      	adds	r3, #72	; 0x48
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	440b      	add	r3, r1
 8001d54:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d122      	bne.n	8001da4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d7e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3248      	adds	r2, #72	; 0x48
 8001d84:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d98:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d9a:	6979      	ldr	r1, [r7, #20]
 8001d9c:	3348      	adds	r3, #72	; 0x48
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	440b      	add	r3, r1
 8001da2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d109      	bne.n	8001dc0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	401a      	ands	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001dbe:	e007      	b.n	8001dd0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001dea:	e007      	b.n	8001dfc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	431a      	orrs	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d107      	bne.n	8001e14 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e1a:	f023 0201 	bic.w	r2, r3, #1
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	e006      	b.n	8001e36 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
  }
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	371c      	adds	r7, #28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d12e      	bne.n	8001eb4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0201 	bic.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e6e:	f7ff fe17 	bl	8001aa0 <HAL_GetTick>
 8001e72:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e74:	e012      	b.n	8001e9c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e76:	f7ff fe13 	bl	8001aa0 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b0a      	cmp	r3, #10
 8001e82:	d90b      	bls.n	8001e9c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2205      	movs	r2, #5
 8001e94:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e012      	b.n	8001ec2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1e5      	bne.n	8001e76 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e006      	b.n	8001ec2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
  }
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b089      	sub	sp, #36	; 0x24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ede:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ee8:	7ffb      	ldrb	r3, [r7, #31]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d003      	beq.n	8001ef6 <HAL_CAN_AddTxMessage+0x2c>
 8001eee:	7ffb      	ldrb	r3, [r7, #31]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	f040 80ad 	bne.w	8002050 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10a      	bne.n	8001f16 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d105      	bne.n	8001f16 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 8095 	beq.w	8002040 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	0e1b      	lsrs	r3, r3, #24
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f20:	2201      	movs	r2, #1
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	409a      	lsls	r2, r3
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10d      	bne.n	8001f4e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f3c:	68f9      	ldr	r1, [r7, #12]
 8001f3e:	6809      	ldr	r1, [r1, #0]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	3318      	adds	r3, #24
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	440b      	add	r3, r1
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e00f      	b.n	8001f6e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f58:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f5e:	68f9      	ldr	r1, [r7, #12]
 8001f60:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f62:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3318      	adds	r3, #24
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	440b      	add	r3, r1
 8001f6c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6819      	ldr	r1, [r3, #0]
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	691a      	ldr	r2, [r3, #16]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	3318      	adds	r3, #24
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	440b      	add	r3, r1
 8001f7e:	3304      	adds	r3, #4
 8001f80:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	7d1b      	ldrb	r3, [r3, #20]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d111      	bne.n	8001fae <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3318      	adds	r3, #24
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	4413      	add	r3, r2
 8001f96:	3304      	adds	r3, #4
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	6811      	ldr	r1, [r2, #0]
 8001f9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	3318      	adds	r3, #24
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	440b      	add	r3, r1
 8001faa:	3304      	adds	r3, #4
 8001fac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3307      	adds	r3, #7
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	061a      	lsls	r2, r3, #24
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3306      	adds	r3, #6
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	041b      	lsls	r3, r3, #16
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3305      	adds	r3, #5
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	3204      	adds	r2, #4
 8001fce:	7812      	ldrb	r2, [r2, #0]
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	6811      	ldr	r1, [r2, #0]
 8001fd6:	ea43 0200 	orr.w	r2, r3, r0
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	440b      	add	r3, r1
 8001fe0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001fe4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3303      	adds	r3, #3
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	061a      	lsls	r2, r3, #24
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	041b      	lsls	r3, r3, #16
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	4313      	orrs	r3, r2
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	7812      	ldrb	r2, [r2, #0]
 8002006:	4610      	mov	r0, r2
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	6811      	ldr	r1, [r2, #0]
 800200c:	ea43 0200 	orr.w	r2, r3, r0
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	440b      	add	r3, r1
 8002016:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800201a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	3318      	adds	r3, #24
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	4413      	add	r3, r2
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	6811      	ldr	r1, [r2, #0]
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3318      	adds	r3, #24
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	440b      	add	r3, r1
 800203a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	e00e      	b.n	800205e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e006      	b.n	800205e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
  }
}
 800205e:	4618      	mov	r0, r3
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800206a:	b480      	push	{r7}
 800206c:	b087      	sub	sp, #28
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800207e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d003      	beq.n	800208e <HAL_CAN_GetRxMessage+0x24>
 8002086:	7dfb      	ldrb	r3, [r7, #23]
 8002088:	2b02      	cmp	r3, #2
 800208a:	f040 80f3 	bne.w	8002274 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10e      	bne.n	80020b2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d116      	bne.n	80020d0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0e7      	b.n	8002282 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0d8      	b.n	8002282 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	331b      	adds	r3, #27
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	4413      	add	r3, r2
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0204 	and.w	r2, r3, #4
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10c      	bne.n	8002108 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	331b      	adds	r3, #27
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	4413      	add	r3, r2
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0d5b      	lsrs	r3, r3, #21
 80020fe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e00b      	b.n	8002120 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	331b      	adds	r3, #27
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	4413      	add	r3, r2
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	08db      	lsrs	r3, r3, #3
 8002118:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	331b      	adds	r3, #27
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	4413      	add	r3, r2
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0202 	and.w	r2, r3, #2
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	331b      	adds	r3, #27
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	4413      	add	r3, r2
 8002142:	3304      	adds	r3, #4
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 020f 	and.w	r2, r3, #15
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	331b      	adds	r3, #27
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	4413      	add	r3, r2
 800215a:	3304      	adds	r3, #4
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	b2da      	uxtb	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	331b      	adds	r3, #27
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	4413      	add	r3, r2
 8002172:	3304      	adds	r3, #4
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	0c1b      	lsrs	r3, r3, #16
 8002178:	b29a      	uxth	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	4413      	add	r3, r2
 8002188:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	4413      	add	r3, r2
 800219e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0a1a      	lsrs	r2, r3, #8
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	3301      	adds	r3, #1
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	0c1a      	lsrs	r2, r3, #16
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	3302      	adds	r3, #2
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	0e1a      	lsrs	r2, r3, #24
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	3303      	adds	r3, #3
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	3304      	adds	r3, #4
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	4413      	add	r3, r2
 8002204:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	0a1a      	lsrs	r2, r3, #8
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	3305      	adds	r3, #5
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	4413      	add	r3, r2
 800221e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	0c1a      	lsrs	r2, r3, #16
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	3306      	adds	r3, #6
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	4413      	add	r3, r2
 8002238:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	0e1a      	lsrs	r2, r3, #24
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	3307      	adds	r3, #7
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d108      	bne.n	8002260 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0220 	orr.w	r2, r2, #32
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	e007      	b.n	8002270 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0220 	orr.w	r2, r2, #32
 800226e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	e006      	b.n	8002282 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
  }
}
 8002282:	4618      	mov	r0, r3
 8002284:	371c      	adds	r7, #28
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800228e:	b480      	push	{r7}
 8002290:	b085      	sub	sp, #20
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d002      	beq.n	80022ac <HAL_CAN_ActivateNotification+0x1e>
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d109      	bne.n	80022c0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6959      	ldr	r1, [r3, #20]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	e006      	b.n	80022ce <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
  }
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b08a      	sub	sp, #40	; 0x28
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d07c      	beq.n	800241a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d023      	beq.n	8002372 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2201      	movs	r2, #1
 8002330:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f983 	bl	8002648 <HAL_CAN_TxMailbox0CompleteCallback>
 8002342:	e016      	b.n	8002372 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
 8002356:	e00c      	b.n	8002372 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
 800236a:	e002      	b.n	8002372 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f989 	bl	8002684 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d024      	beq.n	80023c6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002384:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f963 	bl	800265c <HAL_CAN_TxMailbox1CompleteCallback>
 8002396:	e016      	b.n	80023c6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d004      	beq.n	80023ac <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
 80023aa:	e00c      	b.n	80023c6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d004      	beq.n	80023c0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
 80023be:	e002      	b.n	80023c6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f969 	bl	8002698 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d024      	beq.n	800241a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f943 	bl	8002670 <HAL_CAN_TxMailbox2CompleteCallback>
 80023ea:	e016      	b.n	800241a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d004      	beq.n	8002400 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
 80023fe:	e00c      	b.n	800241a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d004      	beq.n	8002414 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
 8002412:	e002      	b.n	800241a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f949 	bl	80026ac <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	f003 0308 	and.w	r3, r3, #8
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00c      	beq.n	800243e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	d007      	beq.n	800243e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002434:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2210      	movs	r2, #16
 800243c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00b      	beq.n	8002460 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d006      	beq.n	8002460 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2208      	movs	r2, #8
 8002458:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f930 	bl	80026c0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d009      	beq.n	800247e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7fe ff51 	bl	8001320 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00c      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002498:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2210      	movs	r2, #16
 80024a0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00b      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d006      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2208      	movs	r2, #8
 80024bc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f912 	bl	80026e8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d009      	beq.n	80024e2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f8f9 	bl	80026d4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00b      	beq.n	8002504 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d006      	beq.n	8002504 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2210      	movs	r2, #16
 80024fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f8fc 	bl	80026fc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d006      	beq.n	8002526 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2208      	movs	r2, #8
 800251e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f8f5 	bl	8002710 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d07b      	beq.n	8002628 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	d072      	beq.n	8002620 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002594:	2b00      	cmp	r3, #0
 8002596:	d043      	beq.n	8002620 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d03e      	beq.n	8002620 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025a8:	2b60      	cmp	r3, #96	; 0x60
 80025aa:	d02b      	beq.n	8002604 <HAL_CAN_IRQHandler+0x32a>
 80025ac:	2b60      	cmp	r3, #96	; 0x60
 80025ae:	d82e      	bhi.n	800260e <HAL_CAN_IRQHandler+0x334>
 80025b0:	2b50      	cmp	r3, #80	; 0x50
 80025b2:	d022      	beq.n	80025fa <HAL_CAN_IRQHandler+0x320>
 80025b4:	2b50      	cmp	r3, #80	; 0x50
 80025b6:	d82a      	bhi.n	800260e <HAL_CAN_IRQHandler+0x334>
 80025b8:	2b40      	cmp	r3, #64	; 0x40
 80025ba:	d019      	beq.n	80025f0 <HAL_CAN_IRQHandler+0x316>
 80025bc:	2b40      	cmp	r3, #64	; 0x40
 80025be:	d826      	bhi.n	800260e <HAL_CAN_IRQHandler+0x334>
 80025c0:	2b30      	cmp	r3, #48	; 0x30
 80025c2:	d010      	beq.n	80025e6 <HAL_CAN_IRQHandler+0x30c>
 80025c4:	2b30      	cmp	r3, #48	; 0x30
 80025c6:	d822      	bhi.n	800260e <HAL_CAN_IRQHandler+0x334>
 80025c8:	2b10      	cmp	r3, #16
 80025ca:	d002      	beq.n	80025d2 <HAL_CAN_IRQHandler+0x2f8>
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d005      	beq.n	80025dc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80025d0:	e01d      	b.n	800260e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	f043 0308 	orr.w	r3, r3, #8
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025da:	e019      	b.n	8002610 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	f043 0310 	orr.w	r3, r3, #16
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025e4:	e014      	b.n	8002610 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	f043 0320 	orr.w	r3, r3, #32
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025ee:	e00f      	b.n	8002610 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025f8:	e00a      	b.n	8002610 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002602:	e005      	b.n	8002610 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800260c:	e000      	b.n	8002610 <HAL_CAN_IRQHandler+0x336>
            break;
 800260e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699a      	ldr	r2, [r3, #24]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800261e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2204      	movs	r2, #4
 8002626:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	2b00      	cmp	r3, #0
 800262c:	d008      	beq.n	8002640 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f872 	bl	8002724 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002640:	bf00      	nop
 8002642:	3728      	adds	r7, #40	; 0x28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002754:	4013      	ands	r3, r2
 8002756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276a:	4a04      	ldr	r2, [pc, #16]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	60d3      	str	r3, [r2, #12]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <__NVIC_GetPriorityGrouping+0x18>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	0a1b      	lsrs	r3, r3, #8
 800278a:	f003 0307 	and.w	r3, r3, #7
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	db0b      	blt.n	80027c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	4907      	ldr	r1, [pc, #28]	; (80027d4 <__NVIC_EnableIRQ+0x38>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2001      	movs	r0, #1
 80027be:	fa00 f202 	lsl.w	r2, r0, r2
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000e100 	.word	0xe000e100

080027d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	db0a      	blt.n	8002802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	490c      	ldr	r1, [pc, #48]	; (8002824 <__NVIC_SetPriority+0x4c>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	0112      	lsls	r2, r2, #4
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	440b      	add	r3, r1
 80027fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002800:	e00a      	b.n	8002818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4908      	ldr	r1, [pc, #32]	; (8002828 <__NVIC_SetPriority+0x50>)
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	3b04      	subs	r3, #4
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	440b      	add	r3, r1
 8002816:	761a      	strb	r2, [r3, #24]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000e100 	.word	0xe000e100
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f1c3 0307 	rsb	r3, r3, #7
 8002846:	2b04      	cmp	r3, #4
 8002848:	bf28      	it	cs
 800284a:	2304      	movcs	r3, #4
 800284c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3304      	adds	r3, #4
 8002852:	2b06      	cmp	r3, #6
 8002854:	d902      	bls.n	800285c <NVIC_EncodePriority+0x30>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3b03      	subs	r3, #3
 800285a:	e000      	b.n	800285e <NVIC_EncodePriority+0x32>
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	f04f 32ff 	mov.w	r2, #4294967295
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	401a      	ands	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002874:	f04f 31ff 	mov.w	r1, #4294967295
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	43d9      	mvns	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	4313      	orrs	r3, r2
         );
}
 8002886:	4618      	mov	r0, r3
 8002888:	3724      	adds	r7, #36	; 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028a4:	d301      	bcc.n	80028aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00f      	b.n	80028ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <SysTick_Config+0x40>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b2:	210f      	movs	r1, #15
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	f7ff ff8e 	bl	80027d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <SysTick_Config+0x40>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c2:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <SysTick_Config+0x40>)
 80028c4:	2207      	movs	r2, #7
 80028c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	e000e010 	.word	0xe000e010

080028d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ff29 	bl	8002738 <__NVIC_SetPriorityGrouping>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002900:	f7ff ff3e 	bl	8002780 <__NVIC_GetPriorityGrouping>
 8002904:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f7ff ff8e 	bl	800282c <NVIC_EncodePriority>
 8002910:	4602      	mov	r2, r0
 8002912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff5d 	bl	80027d8 <__NVIC_SetPriority>
}
 800291e:	bf00      	nop
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff31 	bl	800279c <__NVIC_EnableIRQ>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ffa2 	bl	8002894 <SysTick_Config>
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800296a:	e154      	b.n	8002c16 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	2101      	movs	r1, #1
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	4013      	ands	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 8146 	beq.w	8002c10 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d005      	beq.n	800299c <HAL_GPIO_Init+0x40>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d130      	bne.n	80029fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029d2:	2201      	movs	r2, #1
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	f003 0201 	and.w	r2, r3, #1
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d017      	beq.n	8002a3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	2203      	movs	r2, #3
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d123      	bne.n	8002a8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	08da      	lsrs	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3208      	adds	r2, #8
 8002a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	220f      	movs	r2, #15
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	691a      	ldr	r2, [r3, #16]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	08da      	lsrs	r2, r3, #3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3208      	adds	r2, #8
 8002a88:	6939      	ldr	r1, [r7, #16]
 8002a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	2203      	movs	r2, #3
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0203 	and.w	r2, r3, #3
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80a0 	beq.w	8002c10 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad0:	4b58      	ldr	r3, [pc, #352]	; (8002c34 <HAL_GPIO_Init+0x2d8>)
 8002ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad4:	4a57      	ldr	r2, [pc, #348]	; (8002c34 <HAL_GPIO_Init+0x2d8>)
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	6613      	str	r3, [r2, #96]	; 0x60
 8002adc:	4b55      	ldr	r3, [pc, #340]	; (8002c34 <HAL_GPIO_Init+0x2d8>)
 8002ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ae8:	4a53      	ldr	r2, [pc, #332]	; (8002c38 <HAL_GPIO_Init+0x2dc>)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	089b      	lsrs	r3, r3, #2
 8002aee:	3302      	adds	r3, #2
 8002af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	220f      	movs	r2, #15
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b12:	d019      	beq.n	8002b48 <HAL_GPIO_Init+0x1ec>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a49      	ldr	r2, [pc, #292]	; (8002c3c <HAL_GPIO_Init+0x2e0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d013      	beq.n	8002b44 <HAL_GPIO_Init+0x1e8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a48      	ldr	r2, [pc, #288]	; (8002c40 <HAL_GPIO_Init+0x2e4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00d      	beq.n	8002b40 <HAL_GPIO_Init+0x1e4>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a47      	ldr	r2, [pc, #284]	; (8002c44 <HAL_GPIO_Init+0x2e8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d007      	beq.n	8002b3c <HAL_GPIO_Init+0x1e0>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a46      	ldr	r2, [pc, #280]	; (8002c48 <HAL_GPIO_Init+0x2ec>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d101      	bne.n	8002b38 <HAL_GPIO_Init+0x1dc>
 8002b34:	2304      	movs	r3, #4
 8002b36:	e008      	b.n	8002b4a <HAL_GPIO_Init+0x1ee>
 8002b38:	2307      	movs	r3, #7
 8002b3a:	e006      	b.n	8002b4a <HAL_GPIO_Init+0x1ee>
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e004      	b.n	8002b4a <HAL_GPIO_Init+0x1ee>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e002      	b.n	8002b4a <HAL_GPIO_Init+0x1ee>
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <HAL_GPIO_Init+0x1ee>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	f002 0203 	and.w	r2, r2, #3
 8002b50:	0092      	lsls	r2, r2, #2
 8002b52:	4093      	lsls	r3, r2
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b5a:	4937      	ldr	r1, [pc, #220]	; (8002c38 <HAL_GPIO_Init+0x2dc>)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	3302      	adds	r3, #2
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b68:	4b38      	ldr	r3, [pc, #224]	; (8002c4c <HAL_GPIO_Init+0x2f0>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b8c:	4a2f      	ldr	r2, [pc, #188]	; (8002c4c <HAL_GPIO_Init+0x2f0>)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b92:	4b2e      	ldr	r3, [pc, #184]	; (8002c4c <HAL_GPIO_Init+0x2f0>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bb6:	4a25      	ldr	r2, [pc, #148]	; (8002c4c <HAL_GPIO_Init+0x2f0>)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bbc:	4b23      	ldr	r3, [pc, #140]	; (8002c4c <HAL_GPIO_Init+0x2f0>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002be0:	4a1a      	ldr	r2, [pc, #104]	; (8002c4c <HAL_GPIO_Init+0x2f0>)
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002be6:	4b19      	ldr	r3, [pc, #100]	; (8002c4c <HAL_GPIO_Init+0x2f0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c0a:	4a10      	ldr	r2, [pc, #64]	; (8002c4c <HAL_GPIO_Init+0x2f0>)
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	3301      	adds	r3, #1
 8002c14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f47f aea3 	bne.w	800296c <HAL_GPIO_Init+0x10>
  }
}
 8002c26:	bf00      	nop
 8002c28:	bf00      	nop
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40010000 	.word	0x40010000
 8002c3c:	48000400 	.word	0x48000400
 8002c40:	48000800 	.word	0x48000800
 8002c44:	48000c00 	.word	0x48000c00
 8002c48:	48001000 	.word	0x48001000
 8002c4c:	40010400 	.word	0x40010400

08002c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c60:	787b      	ldrb	r3, [r7, #1]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c66:	887a      	ldrh	r2, [r7, #2]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c6e:	887a      	ldrh	r2, [r7, #2]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c84:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40007000 	.word	0x40007000

08002c9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002caa:	d130      	bne.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cac:	4b23      	ldr	r3, [pc, #140]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cb8:	d038      	beq.n	8002d2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cba:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cc2:	4a1e      	ldr	r2, [pc, #120]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cca:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2232      	movs	r2, #50	; 0x32
 8002cd0:	fb02 f303 	mul.w	r3, r2, r3
 8002cd4:	4a1b      	ldr	r2, [pc, #108]	; (8002d44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	0c9b      	lsrs	r3, r3, #18
 8002cdc:	3301      	adds	r3, #1
 8002cde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ce0:	e002      	b.n	8002ce8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf4:	d102      	bne.n	8002cfc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f2      	bne.n	8002ce2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d08:	d110      	bne.n	8002d2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e00f      	b.n	8002d2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1a:	d007      	beq.n	8002d2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d1c:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d24:	4a05      	ldr	r2, [pc, #20]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40007000 	.word	0x40007000
 8002d40:	20000000 	.word	0x20000000
 8002d44:	431bde83 	.word	0x431bde83

08002d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d102      	bne.n	8002d5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f000 bc02 	b.w	8003560 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d5c:	4b96      	ldr	r3, [pc, #600]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 030c 	and.w	r3, r3, #12
 8002d64:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d66:	4b94      	ldr	r3, [pc, #592]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80e4 	beq.w	8002f46 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <HAL_RCC_OscConfig+0x4c>
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2b0c      	cmp	r3, #12
 8002d88:	f040 808b 	bne.w	8002ea2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	f040 8087 	bne.w	8002ea2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d94:	4b88      	ldr	r3, [pc, #544]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_OscConfig+0x64>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e3d9      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1a      	ldr	r2, [r3, #32]
 8002db0:	4b81      	ldr	r3, [pc, #516]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d004      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x7e>
 8002dbc:	4b7e      	ldr	r3, [pc, #504]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dc4:	e005      	b.n	8002dd2 <HAL_RCC_OscConfig+0x8a>
 8002dc6:	4b7c      	ldr	r3, [pc, #496]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d223      	bcs.n	8002e1e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fd54 	bl	8003888 <RCC_SetFlashLatencyFromMSIRange>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e3ba      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dea:	4b73      	ldr	r3, [pc, #460]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a72      	ldr	r2, [pc, #456]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002df0:	f043 0308 	orr.w	r3, r3, #8
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	4b70      	ldr	r3, [pc, #448]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	496d      	ldr	r1, [pc, #436]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e08:	4b6b      	ldr	r3, [pc, #428]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	4968      	ldr	r1, [pc, #416]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
 8002e1c:	e025      	b.n	8002e6a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e1e:	4b66      	ldr	r3, [pc, #408]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a65      	ldr	r2, [pc, #404]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002e24:	f043 0308 	orr.w	r3, r3, #8
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	4b63      	ldr	r3, [pc, #396]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	4960      	ldr	r1, [pc, #384]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e3c:	4b5e      	ldr	r3, [pc, #376]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	021b      	lsls	r3, r3, #8
 8002e4a:	495b      	ldr	r1, [pc, #364]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d109      	bne.n	8002e6a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fd14 	bl	8003888 <RCC_SetFlashLatencyFromMSIRange>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e37a      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e6a:	f000 fc81 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	4b51      	ldr	r3, [pc, #324]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	4950      	ldr	r1, [pc, #320]	; (8002fbc <HAL_RCC_OscConfig+0x274>)
 8002e7c:	5ccb      	ldrb	r3, [r1, r3]
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	fa22 f303 	lsr.w	r3, r2, r3
 8002e86:	4a4e      	ldr	r2, [pc, #312]	; (8002fc0 <HAL_RCC_OscConfig+0x278>)
 8002e88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e8a:	4b4e      	ldr	r3, [pc, #312]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe fdb6 	bl	8001a00 <HAL_InitTick>
 8002e94:	4603      	mov	r3, r0
 8002e96:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d052      	beq.n	8002f44 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	e35e      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d032      	beq.n	8002f10 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eaa:	4b43      	ldr	r3, [pc, #268]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a42      	ldr	r2, [pc, #264]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eb6:	f7fe fdf3 	bl	8001aa0 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ebe:	f7fe fdef 	bl	8001aa0 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e347      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ed0:	4b39      	ldr	r3, [pc, #228]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002edc:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a35      	ldr	r2, [pc, #212]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002ee2:	f043 0308 	orr.w	r3, r3, #8
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	4b33      	ldr	r3, [pc, #204]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4930      	ldr	r1, [pc, #192]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002efa:	4b2f      	ldr	r3, [pc, #188]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	492b      	ldr	r1, [pc, #172]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	604b      	str	r3, [r1, #4]
 8002f0e:	e01a      	b.n	8002f46 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f10:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a28      	ldr	r2, [pc, #160]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002f16:	f023 0301 	bic.w	r3, r3, #1
 8002f1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f1c:	f7fe fdc0 	bl	8001aa0 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f24:	f7fe fdbc 	bl	8001aa0 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e314      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x1dc>
 8002f42:	e000      	b.n	8002f46 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d073      	beq.n	800303a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_OscConfig+0x21c>
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	d10e      	bne.n	8002f7c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d10b      	bne.n	8002f7c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d063      	beq.n	8003038 <HAL_RCC_OscConfig+0x2f0>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d15f      	bne.n	8003038 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e2f1      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f84:	d106      	bne.n	8002f94 <HAL_RCC_OscConfig+0x24c>
 8002f86:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a0b      	ldr	r2, [pc, #44]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e025      	b.n	8002fe0 <HAL_RCC_OscConfig+0x298>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f9c:	d114      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x280>
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a05      	ldr	r2, [pc, #20]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a02      	ldr	r2, [pc, #8]	; (8002fb8 <HAL_RCC_OscConfig+0x270>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e013      	b.n	8002fe0 <HAL_RCC_OscConfig+0x298>
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	08005548 	.word	0x08005548
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	20000004 	.word	0x20000004
 8002fc8:	4ba0      	ldr	r3, [pc, #640]	; (800324c <HAL_RCC_OscConfig+0x504>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a9f      	ldr	r2, [pc, #636]	; (800324c <HAL_RCC_OscConfig+0x504>)
 8002fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	4b9d      	ldr	r3, [pc, #628]	; (800324c <HAL_RCC_OscConfig+0x504>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a9c      	ldr	r2, [pc, #624]	; (800324c <HAL_RCC_OscConfig+0x504>)
 8002fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d013      	beq.n	8003010 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fd5a 	bl	8001aa0 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7fe fd56 	bl	8001aa0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e2ae      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003002:	4b92      	ldr	r3, [pc, #584]	; (800324c <HAL_RCC_OscConfig+0x504>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x2a8>
 800300e:	e014      	b.n	800303a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fe fd46 	bl	8001aa0 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003018:	f7fe fd42 	bl	8001aa0 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	; 0x64
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e29a      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800302a:	4b88      	ldr	r3, [pc, #544]	; (800324c <HAL_RCC_OscConfig+0x504>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x2d0>
 8003036:	e000      	b.n	800303a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d060      	beq.n	8003108 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	2b04      	cmp	r3, #4
 800304a:	d005      	beq.n	8003058 <HAL_RCC_OscConfig+0x310>
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2b0c      	cmp	r3, #12
 8003050:	d119      	bne.n	8003086 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b02      	cmp	r3, #2
 8003056:	d116      	bne.n	8003086 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003058:	4b7c      	ldr	r3, [pc, #496]	; (800324c <HAL_RCC_OscConfig+0x504>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_RCC_OscConfig+0x328>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e277      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003070:	4b76      	ldr	r3, [pc, #472]	; (800324c <HAL_RCC_OscConfig+0x504>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	061b      	lsls	r3, r3, #24
 800307e:	4973      	ldr	r1, [pc, #460]	; (800324c <HAL_RCC_OscConfig+0x504>)
 8003080:	4313      	orrs	r3, r2
 8003082:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003084:	e040      	b.n	8003108 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d023      	beq.n	80030d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800308e:	4b6f      	ldr	r3, [pc, #444]	; (800324c <HAL_RCC_OscConfig+0x504>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a6e      	ldr	r2, [pc, #440]	; (800324c <HAL_RCC_OscConfig+0x504>)
 8003094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309a:	f7fe fd01 	bl	8001aa0 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a2:	f7fe fcfd 	bl	8001aa0 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e255      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b4:	4b65      	ldr	r3, [pc, #404]	; (800324c <HAL_RCC_OscConfig+0x504>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c0:	4b62      	ldr	r3, [pc, #392]	; (800324c <HAL_RCC_OscConfig+0x504>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	061b      	lsls	r3, r3, #24
 80030ce:	495f      	ldr	r1, [pc, #380]	; (800324c <HAL_RCC_OscConfig+0x504>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	604b      	str	r3, [r1, #4]
 80030d4:	e018      	b.n	8003108 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d6:	4b5d      	ldr	r3, [pc, #372]	; (800324c <HAL_RCC_OscConfig+0x504>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a5c      	ldr	r2, [pc, #368]	; (800324c <HAL_RCC_OscConfig+0x504>)
 80030dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e2:	f7fe fcdd 	bl	8001aa0 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ea:	f7fe fcd9 	bl	8001aa0 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e231      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030fc:	4b53      	ldr	r3, [pc, #332]	; (800324c <HAL_RCC_OscConfig+0x504>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f0      	bne.n	80030ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d03c      	beq.n	800318e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01c      	beq.n	8003156 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311c:	4b4b      	ldr	r3, [pc, #300]	; (800324c <HAL_RCC_OscConfig+0x504>)
 800311e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003122:	4a4a      	ldr	r2, [pc, #296]	; (800324c <HAL_RCC_OscConfig+0x504>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312c:	f7fe fcb8 	bl	8001aa0 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003134:	f7fe fcb4 	bl	8001aa0 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e20c      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003146:	4b41      	ldr	r3, [pc, #260]	; (800324c <HAL_RCC_OscConfig+0x504>)
 8003148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0ef      	beq.n	8003134 <HAL_RCC_OscConfig+0x3ec>
 8003154:	e01b      	b.n	800318e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003156:	4b3d      	ldr	r3, [pc, #244]	; (800324c <HAL_RCC_OscConfig+0x504>)
 8003158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800315c:	4a3b      	ldr	r2, [pc, #236]	; (800324c <HAL_RCC_OscConfig+0x504>)
 800315e:	f023 0301 	bic.w	r3, r3, #1
 8003162:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003166:	f7fe fc9b 	bl	8001aa0 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316e:	f7fe fc97 	bl	8001aa0 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e1ef      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003180:	4b32      	ldr	r3, [pc, #200]	; (800324c <HAL_RCC_OscConfig+0x504>)
 8003182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1ef      	bne.n	800316e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 80a6 	beq.w	80032e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800319c:	2300      	movs	r3, #0
 800319e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031a0:	4b2a      	ldr	r3, [pc, #168]	; (800324c <HAL_RCC_OscConfig+0x504>)
 80031a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10d      	bne.n	80031c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ac:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_RCC_OscConfig+0x504>)
 80031ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b0:	4a26      	ldr	r2, [pc, #152]	; (800324c <HAL_RCC_OscConfig+0x504>)
 80031b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b6:	6593      	str	r3, [r2, #88]	; 0x58
 80031b8:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCC_OscConfig+0x504>)
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031c4:	2301      	movs	r3, #1
 80031c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031c8:	4b21      	ldr	r3, [pc, #132]	; (8003250 <HAL_RCC_OscConfig+0x508>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d118      	bne.n	8003206 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031d4:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <HAL_RCC_OscConfig+0x508>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1d      	ldr	r2, [pc, #116]	; (8003250 <HAL_RCC_OscConfig+0x508>)
 80031da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e0:	f7fe fc5e 	bl	8001aa0 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e8:	f7fe fc5a 	bl	8001aa0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e1b2      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031fa:	4b15      	ldr	r3, [pc, #84]	; (8003250 <HAL_RCC_OscConfig+0x508>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d108      	bne.n	8003220 <HAL_RCC_OscConfig+0x4d8>
 800320e:	4b0f      	ldr	r3, [pc, #60]	; (800324c <HAL_RCC_OscConfig+0x504>)
 8003210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003214:	4a0d      	ldr	r2, [pc, #52]	; (800324c <HAL_RCC_OscConfig+0x504>)
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800321e:	e029      	b.n	8003274 <HAL_RCC_OscConfig+0x52c>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2b05      	cmp	r3, #5
 8003226:	d115      	bne.n	8003254 <HAL_RCC_OscConfig+0x50c>
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <HAL_RCC_OscConfig+0x504>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	4a07      	ldr	r2, [pc, #28]	; (800324c <HAL_RCC_OscConfig+0x504>)
 8003230:	f043 0304 	orr.w	r3, r3, #4
 8003234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003238:	4b04      	ldr	r3, [pc, #16]	; (800324c <HAL_RCC_OscConfig+0x504>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	4a03      	ldr	r2, [pc, #12]	; (800324c <HAL_RCC_OscConfig+0x504>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003248:	e014      	b.n	8003274 <HAL_RCC_OscConfig+0x52c>
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000
 8003250:	40007000 	.word	0x40007000
 8003254:	4b9a      	ldr	r3, [pc, #616]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 8003256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325a:	4a99      	ldr	r2, [pc, #612]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003264:	4b96      	ldr	r3, [pc, #600]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	4a95      	ldr	r2, [pc, #596]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 800326c:	f023 0304 	bic.w	r3, r3, #4
 8003270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d016      	beq.n	80032aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327c:	f7fe fc10 	bl	8001aa0 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003282:	e00a      	b.n	800329a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003284:	f7fe fc0c 	bl	8001aa0 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e162      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800329a:	4b89      	ldr	r3, [pc, #548]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 800329c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ed      	beq.n	8003284 <HAL_RCC_OscConfig+0x53c>
 80032a8:	e015      	b.n	80032d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032aa:	f7fe fbf9 	bl	8001aa0 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032b0:	e00a      	b.n	80032c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b2:	f7fe fbf5 	bl	8001aa0 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e14b      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032c8:	4b7d      	ldr	r3, [pc, #500]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1ed      	bne.n	80032b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032d6:	7ffb      	ldrb	r3, [r7, #31]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d105      	bne.n	80032e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032dc:	4b78      	ldr	r3, [pc, #480]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 80032de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e0:	4a77      	ldr	r2, [pc, #476]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 80032e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d03c      	beq.n	800336e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01c      	beq.n	8003336 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032fc:	4b70      	ldr	r3, [pc, #448]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 80032fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003302:	4a6f      	ldr	r2, [pc, #444]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7fe fbc8 	bl	8001aa0 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003314:	f7fe fbc4 	bl	8001aa0 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e11c      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003326:	4b66      	ldr	r3, [pc, #408]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 8003328:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0ef      	beq.n	8003314 <HAL_RCC_OscConfig+0x5cc>
 8003334:	e01b      	b.n	800336e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003336:	4b62      	ldr	r3, [pc, #392]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 8003338:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800333c:	4a60      	ldr	r2, [pc, #384]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003346:	f7fe fbab 	bl	8001aa0 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800334e:	f7fe fba7 	bl	8001aa0 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e0ff      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003360:	4b57      	ldr	r3, [pc, #348]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 8003362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1ef      	bne.n	800334e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80f3 	beq.w	800355e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	2b02      	cmp	r3, #2
 800337e:	f040 80c9 	bne.w	8003514 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003382:	4b4f      	ldr	r3, [pc, #316]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f003 0203 	and.w	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	429a      	cmp	r2, r3
 8003394:	d12c      	bne.n	80033f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	3b01      	subs	r3, #1
 80033a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d123      	bne.n	80033f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d11b      	bne.n	80033f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d113      	bne.n	80033f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d2:	085b      	lsrs	r3, r3, #1
 80033d4:	3b01      	subs	r3, #1
 80033d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d109      	bne.n	80033f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	085b      	lsrs	r3, r3, #1
 80033e8:	3b01      	subs	r3, #1
 80033ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d06b      	beq.n	80034c8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2b0c      	cmp	r3, #12
 80033f4:	d062      	beq.n	80034bc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033f6:	4b32      	ldr	r3, [pc, #200]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e0ac      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003406:	4b2e      	ldr	r3, [pc, #184]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2d      	ldr	r2, [pc, #180]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 800340c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003410:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003412:	f7fe fb45 	bl	8001aa0 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341a:	f7fe fb41 	bl	8001aa0 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e099      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800342c:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f0      	bne.n	800341a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003438:	4b21      	ldr	r3, [pc, #132]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	4b21      	ldr	r3, [pc, #132]	; (80034c4 <HAL_RCC_OscConfig+0x77c>)
 800343e:	4013      	ands	r3, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003448:	3a01      	subs	r2, #1
 800344a:	0112      	lsls	r2, r2, #4
 800344c:	4311      	orrs	r1, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003452:	0212      	lsls	r2, r2, #8
 8003454:	4311      	orrs	r1, r2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800345a:	0852      	lsrs	r2, r2, #1
 800345c:	3a01      	subs	r2, #1
 800345e:	0552      	lsls	r2, r2, #21
 8003460:	4311      	orrs	r1, r2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003466:	0852      	lsrs	r2, r2, #1
 8003468:	3a01      	subs	r2, #1
 800346a:	0652      	lsls	r2, r2, #25
 800346c:	4311      	orrs	r1, r2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003472:	06d2      	lsls	r2, r2, #27
 8003474:	430a      	orrs	r2, r1
 8003476:	4912      	ldr	r1, [pc, #72]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 8003478:	4313      	orrs	r3, r2
 800347a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800347c:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a0f      	ldr	r2, [pc, #60]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 8003482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003486:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003488:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4a0c      	ldr	r2, [pc, #48]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 800348e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003492:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003494:	f7fe fb04 	bl	8001aa0 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7fe fb00 	bl	8001aa0 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e058      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <HAL_RCC_OscConfig+0x778>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ba:	e050      	b.n	800355e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e04f      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
 80034c0:	40021000 	.word	0x40021000
 80034c4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c8:	4b27      	ldr	r3, [pc, #156]	; (8003568 <HAL_RCC_OscConfig+0x820>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d144      	bne.n	800355e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034d4:	4b24      	ldr	r3, [pc, #144]	; (8003568 <HAL_RCC_OscConfig+0x820>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a23      	ldr	r2, [pc, #140]	; (8003568 <HAL_RCC_OscConfig+0x820>)
 80034da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034e0:	4b21      	ldr	r3, [pc, #132]	; (8003568 <HAL_RCC_OscConfig+0x820>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4a20      	ldr	r2, [pc, #128]	; (8003568 <HAL_RCC_OscConfig+0x820>)
 80034e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034ec:	f7fe fad8 	bl	8001aa0 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fe fad4 	bl	8001aa0 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e02c      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003506:	4b18      	ldr	r3, [pc, #96]	; (8003568 <HAL_RCC_OscConfig+0x820>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0x7ac>
 8003512:	e024      	b.n	800355e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2b0c      	cmp	r3, #12
 8003518:	d01f      	beq.n	800355a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <HAL_RCC_OscConfig+0x820>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a12      	ldr	r2, [pc, #72]	; (8003568 <HAL_RCC_OscConfig+0x820>)
 8003520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003526:	f7fe fabb 	bl	8001aa0 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352e:	f7fe fab7 	bl	8001aa0 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e00f      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003540:	4b09      	ldr	r3, [pc, #36]	; (8003568 <HAL_RCC_OscConfig+0x820>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1f0      	bne.n	800352e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_RCC_OscConfig+0x820>)
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	4905      	ldr	r1, [pc, #20]	; (8003568 <HAL_RCC_OscConfig+0x820>)
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCC_OscConfig+0x824>)
 8003554:	4013      	ands	r3, r2
 8003556:	60cb      	str	r3, [r1, #12]
 8003558:	e001      	b.n	800355e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3720      	adds	r7, #32
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000
 800356c:	feeefffc 	.word	0xfeeefffc

08003570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0e7      	b.n	8003754 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003584:	4b75      	ldr	r3, [pc, #468]	; (800375c <HAL_RCC_ClockConfig+0x1ec>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d910      	bls.n	80035b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b72      	ldr	r3, [pc, #456]	; (800375c <HAL_RCC_ClockConfig+0x1ec>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 0207 	bic.w	r2, r3, #7
 800359a:	4970      	ldr	r1, [pc, #448]	; (800375c <HAL_RCC_ClockConfig+0x1ec>)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b6e      	ldr	r3, [pc, #440]	; (800375c <HAL_RCC_ClockConfig+0x1ec>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0cf      	b.n	8003754 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d010      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	4b66      	ldr	r3, [pc, #408]	; (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d908      	bls.n	80035e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d0:	4b63      	ldr	r3, [pc, #396]	; (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4960      	ldr	r1, [pc, #384]	; (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d04c      	beq.n	8003688 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f6:	4b5a      	ldr	r3, [pc, #360]	; (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d121      	bne.n	8003646 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e0a6      	b.n	8003754 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800360e:	4b54      	ldr	r3, [pc, #336]	; (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d115      	bne.n	8003646 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e09a      	b.n	8003754 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d107      	bne.n	8003636 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003626:	4b4e      	ldr	r3, [pc, #312]	; (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e08e      	b.n	8003754 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003636:	4b4a      	ldr	r3, [pc, #296]	; (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e086      	b.n	8003754 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003646:	4b46      	ldr	r3, [pc, #280]	; (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f023 0203 	bic.w	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	4943      	ldr	r1, [pc, #268]	; (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 8003654:	4313      	orrs	r3, r2
 8003656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003658:	f7fe fa22 	bl	8001aa0 <HAL_GetTick>
 800365c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365e:	e00a      	b.n	8003676 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003660:	f7fe fa1e 	bl	8001aa0 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	; 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e06e      	b.n	8003754 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003676:	4b3a      	ldr	r3, [pc, #232]	; (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 020c 	and.w	r2, r3, #12
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	429a      	cmp	r2, r3
 8003686:	d1eb      	bne.n	8003660 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d010      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	4b31      	ldr	r3, [pc, #196]	; (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d208      	bcs.n	80036b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a4:	4b2e      	ldr	r3, [pc, #184]	; (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	492b      	ldr	r1, [pc, #172]	; (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036b6:	4b29      	ldr	r3, [pc, #164]	; (800375c <HAL_RCC_ClockConfig+0x1ec>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d210      	bcs.n	80036e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c4:	4b25      	ldr	r3, [pc, #148]	; (800375c <HAL_RCC_ClockConfig+0x1ec>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f023 0207 	bic.w	r2, r3, #7
 80036cc:	4923      	ldr	r1, [pc, #140]	; (800375c <HAL_RCC_ClockConfig+0x1ec>)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d4:	4b21      	ldr	r3, [pc, #132]	; (800375c <HAL_RCC_ClockConfig+0x1ec>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d001      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e036      	b.n	8003754 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f2:	4b1b      	ldr	r3, [pc, #108]	; (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	4918      	ldr	r1, [pc, #96]	; (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 8003700:	4313      	orrs	r3, r2
 8003702:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d009      	beq.n	8003724 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003710:	4b13      	ldr	r3, [pc, #76]	; (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4910      	ldr	r1, [pc, #64]	; (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003724:	f000 f824 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <HAL_RCC_ClockConfig+0x1f0>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	091b      	lsrs	r3, r3, #4
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	490b      	ldr	r1, [pc, #44]	; (8003764 <HAL_RCC_ClockConfig+0x1f4>)
 8003736:	5ccb      	ldrb	r3, [r1, r3]
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
 8003740:	4a09      	ldr	r2, [pc, #36]	; (8003768 <HAL_RCC_ClockConfig+0x1f8>)
 8003742:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <HAL_RCC_ClockConfig+0x1fc>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f7fe f959 	bl	8001a00 <HAL_InitTick>
 800374e:	4603      	mov	r3, r0
 8003750:	72fb      	strb	r3, [r7, #11]

  return status;
 8003752:	7afb      	ldrb	r3, [r7, #11]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40022000 	.word	0x40022000
 8003760:	40021000 	.word	0x40021000
 8003764:	08005548 	.word	0x08005548
 8003768:	20000000 	.word	0x20000000
 800376c:	20000004 	.word	0x20000004

08003770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003770:	b480      	push	{r7}
 8003772:	b089      	sub	sp, #36	; 0x24
 8003774:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	2300      	movs	r3, #0
 800377c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800377e:	4b3e      	ldr	r3, [pc, #248]	; (8003878 <HAL_RCC_GetSysClockFreq+0x108>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003788:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <HAL_RCC_GetSysClockFreq+0x108>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0x34>
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b0c      	cmp	r3, #12
 800379c:	d121      	bne.n	80037e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d11e      	bne.n	80037e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037a4:	4b34      	ldr	r3, [pc, #208]	; (8003878 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037b0:	4b31      	ldr	r3, [pc, #196]	; (8003878 <HAL_RCC_GetSysClockFreq+0x108>)
 80037b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b6:	0a1b      	lsrs	r3, r3, #8
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	e005      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037c0:	4b2d      	ldr	r3, [pc, #180]	; (8003878 <HAL_RCC_GetSysClockFreq+0x108>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037cc:	4a2b      	ldr	r2, [pc, #172]	; (800387c <HAL_RCC_GetSysClockFreq+0x10c>)
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10d      	bne.n	80037f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037e0:	e00a      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d102      	bne.n	80037ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037e8:	4b25      	ldr	r3, [pc, #148]	; (8003880 <HAL_RCC_GetSysClockFreq+0x110>)
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	e004      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037f4:	4b23      	ldr	r3, [pc, #140]	; (8003884 <HAL_RCC_GetSysClockFreq+0x114>)
 80037f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	2b0c      	cmp	r3, #12
 80037fc:	d134      	bne.n	8003868 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <HAL_RCC_GetSysClockFreq+0x108>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d003      	beq.n	8003816 <HAL_RCC_GetSysClockFreq+0xa6>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d003      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0xac>
 8003814:	e005      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003816:	4b1a      	ldr	r3, [pc, #104]	; (8003880 <HAL_RCC_GetSysClockFreq+0x110>)
 8003818:	617b      	str	r3, [r7, #20]
      break;
 800381a:	e005      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800381c:	4b19      	ldr	r3, [pc, #100]	; (8003884 <HAL_RCC_GetSysClockFreq+0x114>)
 800381e:	617b      	str	r3, [r7, #20]
      break;
 8003820:	e002      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	617b      	str	r3, [r7, #20]
      break;
 8003826:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003828:	4b13      	ldr	r3, [pc, #76]	; (8003878 <HAL_RCC_GetSysClockFreq+0x108>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	3301      	adds	r3, #1
 8003834:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003836:	4b10      	ldr	r3, [pc, #64]	; (8003878 <HAL_RCC_GetSysClockFreq+0x108>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	fb03 f202 	mul.w	r2, r3, r2
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800384e:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <HAL_RCC_GetSysClockFreq+0x108>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	0e5b      	lsrs	r3, r3, #25
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	3301      	adds	r3, #1
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	fbb2 f3f3 	udiv	r3, r2, r3
 8003866:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003868:	69bb      	ldr	r3, [r7, #24]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3724      	adds	r7, #36	; 0x24
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000
 800387c:	08005558 	.word	0x08005558
 8003880:	00f42400 	.word	0x00f42400
 8003884:	007a1200 	.word	0x007a1200

08003888 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003890:	2300      	movs	r3, #0
 8003892:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003894:	4b2a      	ldr	r3, [pc, #168]	; (8003940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038a0:	f7ff f9ee 	bl	8002c80 <HAL_PWREx_GetVoltageRange>
 80038a4:	6178      	str	r0, [r7, #20]
 80038a6:	e014      	b.n	80038d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038a8:	4b25      	ldr	r3, [pc, #148]	; (8003940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ac:	4a24      	ldr	r2, [pc, #144]	; (8003940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b2:	6593      	str	r3, [r2, #88]	; 0x58
 80038b4:	4b22      	ldr	r3, [pc, #136]	; (8003940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038c0:	f7ff f9de 	bl	8002c80 <HAL_PWREx_GetVoltageRange>
 80038c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038c6:	4b1e      	ldr	r3, [pc, #120]	; (8003940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ca:	4a1d      	ldr	r2, [pc, #116]	; (8003940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d8:	d10b      	bne.n	80038f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b80      	cmp	r3, #128	; 0x80
 80038de:	d919      	bls.n	8003914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2ba0      	cmp	r3, #160	; 0xa0
 80038e4:	d902      	bls.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038e6:	2302      	movs	r3, #2
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	e013      	b.n	8003914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038ec:	2301      	movs	r3, #1
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	e010      	b.n	8003914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b80      	cmp	r3, #128	; 0x80
 80038f6:	d902      	bls.n	80038fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038f8:	2303      	movs	r3, #3
 80038fa:	613b      	str	r3, [r7, #16]
 80038fc:	e00a      	b.n	8003914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b80      	cmp	r3, #128	; 0x80
 8003902:	d102      	bne.n	800390a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003904:	2302      	movs	r3, #2
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	e004      	b.n	8003914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b70      	cmp	r3, #112	; 0x70
 800390e:	d101      	bne.n	8003914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003910:	2301      	movs	r3, #1
 8003912:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f023 0207 	bic.w	r2, r3, #7
 800391c:	4909      	ldr	r1, [pc, #36]	; (8003944 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003924:	4b07      	ldr	r3, [pc, #28]	; (8003944 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	429a      	cmp	r2, r3
 8003930:	d001      	beq.n	8003936 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	40022000 	.word	0x40022000

08003948 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e095      	b.n	8003a86 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	2b00      	cmp	r3, #0
 8003960:	d108      	bne.n	8003974 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800396a:	d009      	beq.n	8003980 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	61da      	str	r2, [r3, #28]
 8003972:	e005      	b.n	8003980 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd fbb6 	bl	800110c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039c0:	d902      	bls.n	80039c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	e002      	b.n	80039ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039d6:	d007      	beq.n	80039e8 <HAL_SPI_Init+0xa0>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039e0:	d002      	beq.n	80039e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2a:	ea42 0103 	orr.w	r1, r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	0c1b      	lsrs	r3, r3, #16
 8003a44:	f003 0204 	and.w	r2, r3, #4
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a64:	ea42 0103 	orr.w	r1, r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b088      	sub	sp, #32
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_SPI_Transmit+0x22>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e158      	b.n	8003d62 <HAL_SPI_Transmit+0x2d4>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ab8:	f7fd fff2 	bl	8001aa0 <HAL_GetTick>
 8003abc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d002      	beq.n	8003ad4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ad2:	e13d      	b.n	8003d50 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_SPI_Transmit+0x52>
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d102      	bne.n	8003ae6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ae4:	e134      	b.n	8003d50 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2203      	movs	r2, #3
 8003aea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	88fa      	ldrh	r2, [r7, #6]
 8003afe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	88fa      	ldrh	r2, [r7, #6]
 8003b04:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b30:	d10f      	bne.n	8003b52 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	d007      	beq.n	8003b70 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b78:	d94b      	bls.n	8003c12 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_SPI_Transmit+0xfa>
 8003b82:	8afb      	ldrh	r3, [r7, #22]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d13e      	bne.n	8003c06 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	881a      	ldrh	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	1c9a      	adds	r2, r3, #2
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bac:	e02b      	b.n	8003c06 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d112      	bne.n	8003be2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	881a      	ldrh	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	1c9a      	adds	r2, r3, #2
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003be0:	e011      	b.n	8003c06 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003be2:	f7fd ff5d 	bl	8001aa0 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d803      	bhi.n	8003bfa <HAL_SPI_Transmit+0x16c>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf8:	d102      	bne.n	8003c00 <HAL_SPI_Transmit+0x172>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d102      	bne.n	8003c06 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c04:	e0a4      	b.n	8003d50 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1ce      	bne.n	8003bae <HAL_SPI_Transmit+0x120>
 8003c10:	e07c      	b.n	8003d0c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_SPI_Transmit+0x192>
 8003c1a:	8afb      	ldrh	r3, [r7, #22]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d170      	bne.n	8003d02 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d912      	bls.n	8003c50 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	881a      	ldrh	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	1c9a      	adds	r2, r3, #2
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b02      	subs	r3, #2
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c4e:	e058      	b.n	8003d02 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	7812      	ldrb	r2, [r2, #0]
 8003c5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003c76:	e044      	b.n	8003d02 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d12b      	bne.n	8003cde <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d912      	bls.n	8003cb6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	881a      	ldrh	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	1c9a      	adds	r2, r3, #2
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b02      	subs	r3, #2
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cb4:	e025      	b.n	8003d02 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	330c      	adds	r3, #12
 8003cc0:	7812      	ldrb	r2, [r2, #0]
 8003cc2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cdc:	e011      	b.n	8003d02 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cde:	f7fd fedf 	bl	8001aa0 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d803      	bhi.n	8003cf6 <HAL_SPI_Transmit+0x268>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf4:	d102      	bne.n	8003cfc <HAL_SPI_Transmit+0x26e>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d102      	bne.n	8003d02 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d00:	e026      	b.n	8003d50 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1b5      	bne.n	8003c78 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	6839      	ldr	r1, [r7, #0]
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fce3 	bl	80046dc <SPI_EndRxTxTransaction>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	77fb      	strb	r3, [r7, #31]
 8003d4c:	e000      	b.n	8003d50 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003d4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d60:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b088      	sub	sp, #32
 8003d6e:	af02      	add	r7, sp, #8
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	603b      	str	r3, [r7, #0]
 8003d76:	4613      	mov	r3, r2
 8003d78:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d86:	d112      	bne.n	8003dae <HAL_SPI_Receive+0x44>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10e      	bne.n	8003dae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2204      	movs	r2, #4
 8003d94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d98:	88fa      	ldrh	r2, [r7, #6]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f910 	bl	8003fca <HAL_SPI_TransmitReceive>
 8003daa:	4603      	mov	r3, r0
 8003dac:	e109      	b.n	8003fc2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_SPI_Receive+0x52>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e102      	b.n	8003fc2 <HAL_SPI_Receive+0x258>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dc4:	f7fd fe6c 	bl	8001aa0 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d002      	beq.n	8003ddc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dda:	e0e9      	b.n	8003fb0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <HAL_SPI_Receive+0x7e>
 8003de2:	88fb      	ldrh	r3, [r7, #6]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d102      	bne.n	8003dee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dec:	e0e0      	b.n	8003fb0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2204      	movs	r2, #4
 8003df2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	88fa      	ldrh	r2, [r7, #6]
 8003e06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	88fa      	ldrh	r2, [r7, #6]
 8003e0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e38:	d908      	bls.n	8003e4c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	e007      	b.n	8003e5c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e5a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e64:	d10f      	bne.n	8003e86 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e84:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	d007      	beq.n	8003ea4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ea2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003eac:	d867      	bhi.n	8003f7e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003eae:	e030      	b.n	8003f12 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d117      	bne.n	8003eee <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f103 020c 	add.w	r2, r3, #12
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	7812      	ldrb	r2, [r2, #0]
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003eec:	e011      	b.n	8003f12 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eee:	f7fd fdd7 	bl	8001aa0 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d803      	bhi.n	8003f06 <HAL_SPI_Receive+0x19c>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d102      	bne.n	8003f0c <HAL_SPI_Receive+0x1a2>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d102      	bne.n	8003f12 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f10:	e04e      	b.n	8003fb0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1c8      	bne.n	8003eb0 <HAL_SPI_Receive+0x146>
 8003f1e:	e034      	b.n	8003f8a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d115      	bne.n	8003f5a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	b292      	uxth	r2, r2
 8003f3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	1c9a      	adds	r2, r3, #2
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003f58:	e011      	b.n	8003f7e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f5a:	f7fd fda1 	bl	8001aa0 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d803      	bhi.n	8003f72 <HAL_SPI_Receive+0x208>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d102      	bne.n	8003f78 <HAL_SPI_Receive+0x20e>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f7c:	e018      	b.n	8003fb0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1ca      	bne.n	8003f20 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	6839      	ldr	r1, [r7, #0]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 fb4c 	bl	800462c <SPI_EndRxTransaction>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	75fb      	strb	r3, [r7, #23]
 8003fac:	e000      	b.n	8003fb0 <HAL_SPI_Receive+0x246>
  }

error :
 8003fae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b08a      	sub	sp, #40	; 0x28
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	607a      	str	r2, [r7, #4]
 8003fd6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_SPI_TransmitReceive+0x26>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e1fb      	b.n	80043e8 <HAL_SPI_TransmitReceive+0x41e>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ff8:	f7fd fd52 	bl	8001aa0 <HAL_GetTick>
 8003ffc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004004:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800400c:	887b      	ldrh	r3, [r7, #2]
 800400e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004010:	887b      	ldrh	r3, [r7, #2]
 8004012:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004014:	7efb      	ldrb	r3, [r7, #27]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d00e      	beq.n	8004038 <HAL_SPI_TransmitReceive+0x6e>
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004020:	d106      	bne.n	8004030 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d102      	bne.n	8004030 <HAL_SPI_TransmitReceive+0x66>
 800402a:	7efb      	ldrb	r3, [r7, #27]
 800402c:	2b04      	cmp	r3, #4
 800402e:	d003      	beq.n	8004038 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004030:	2302      	movs	r3, #2
 8004032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004036:	e1cd      	b.n	80043d4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <HAL_SPI_TransmitReceive+0x80>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_SPI_TransmitReceive+0x80>
 8004044:	887b      	ldrh	r3, [r7, #2]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004050:	e1c0      	b.n	80043d4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b04      	cmp	r3, #4
 800405c:	d003      	beq.n	8004066 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2205      	movs	r2, #5
 8004062:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	887a      	ldrh	r2, [r7, #2]
 8004076:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	887a      	ldrh	r2, [r7, #2]
 800407e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	887a      	ldrh	r2, [r7, #2]
 8004092:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040a8:	d802      	bhi.n	80040b0 <HAL_SPI_TransmitReceive+0xe6>
 80040aa:	8a3b      	ldrh	r3, [r7, #16]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d908      	bls.n	80040c2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040be:	605a      	str	r2, [r3, #4]
 80040c0:	e007      	b.n	80040d2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040d0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	2b40      	cmp	r3, #64	; 0x40
 80040de:	d007      	beq.n	80040f0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040f8:	d97c      	bls.n	80041f4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <HAL_SPI_TransmitReceive+0x13e>
 8004102:	8a7b      	ldrh	r3, [r7, #18]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d169      	bne.n	80041dc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	881a      	ldrh	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	1c9a      	adds	r2, r3, #2
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800412c:	e056      	b.n	80041dc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b02      	cmp	r3, #2
 800413a:	d11b      	bne.n	8004174 <HAL_SPI_TransmitReceive+0x1aa>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d016      	beq.n	8004174 <HAL_SPI_TransmitReceive+0x1aa>
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	2b01      	cmp	r3, #1
 800414a:	d113      	bne.n	8004174 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	881a      	ldrh	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	1c9a      	adds	r2, r3, #2
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b01      	cmp	r3, #1
 8004180:	d11c      	bne.n	80041bc <HAL_SPI_TransmitReceive+0x1f2>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d016      	beq.n	80041bc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	b292      	uxth	r2, r2
 800419a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	1c9a      	adds	r2, r3, #2
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041b8:	2301      	movs	r3, #1
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041bc:	f7fd fc70 	bl	8001aa0 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d807      	bhi.n	80041dc <HAL_SPI_TransmitReceive+0x212>
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	d003      	beq.n	80041dc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80041da:	e0fb      	b.n	80043d4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1a3      	bne.n	800412e <HAL_SPI_TransmitReceive+0x164>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d19d      	bne.n	800412e <HAL_SPI_TransmitReceive+0x164>
 80041f2:	e0df      	b.n	80043b4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_SPI_TransmitReceive+0x23a>
 80041fc:	8a7b      	ldrh	r3, [r7, #18]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	f040 80cb 	bne.w	800439a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	d912      	bls.n	8004234 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	881a      	ldrh	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	1c9a      	adds	r2, r3, #2
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b02      	subs	r3, #2
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004232:	e0b2      	b.n	800439a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	330c      	adds	r3, #12
 800423e:	7812      	ldrb	r2, [r2, #0]
 8004240:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800425a:	e09e      	b.n	800439a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b02      	cmp	r3, #2
 8004268:	d134      	bne.n	80042d4 <HAL_SPI_TransmitReceive+0x30a>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d02f      	beq.n	80042d4 <HAL_SPI_TransmitReceive+0x30a>
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	2b01      	cmp	r3, #1
 8004278:	d12c      	bne.n	80042d4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b01      	cmp	r3, #1
 8004282:	d912      	bls.n	80042aa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	881a      	ldrh	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	1c9a      	adds	r2, r3, #2
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b02      	subs	r3, #2
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042a8:	e012      	b.n	80042d0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	330c      	adds	r3, #12
 80042b4:	7812      	ldrb	r2, [r2, #0]
 80042b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d148      	bne.n	8004374 <HAL_SPI_TransmitReceive+0x3aa>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d042      	beq.n	8004374 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d923      	bls.n	8004342 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	b292      	uxth	r2, r2
 8004306:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	1c9a      	adds	r2, r3, #2
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b02      	subs	r3, #2
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800432a:	b29b      	uxth	r3, r3
 800432c:	2b01      	cmp	r3, #1
 800432e:	d81f      	bhi.n	8004370 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800433e:	605a      	str	r2, [r3, #4]
 8004340:	e016      	b.n	8004370 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f103 020c 	add.w	r2, r3, #12
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	7812      	ldrb	r2, [r2, #0]
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004370:	2301      	movs	r3, #1
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004374:	f7fd fb94 	bl	8001aa0 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004380:	429a      	cmp	r2, r3
 8004382:	d803      	bhi.n	800438c <HAL_SPI_TransmitReceive+0x3c2>
 8004384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	d102      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x3c8>
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	2b00      	cmp	r3, #0
 8004390:	d103      	bne.n	800439a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004398:	e01c      	b.n	80043d4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f47f af5b 	bne.w	800425c <HAL_SPI_TransmitReceive+0x292>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f47f af54 	bne.w	800425c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043b4:	69fa      	ldr	r2, [r7, #28]
 80043b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 f98f 	bl	80046dc <SPI_EndRxTxTransaction>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d006      	beq.n	80043d2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	661a      	str	r2, [r3, #96]	; 0x60
 80043d0:	e000      	b.n	80043d4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80043d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80043e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3728      	adds	r7, #40	; 0x28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004400:	f7fd fb4e 	bl	8001aa0 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	4413      	add	r3, r2
 800440e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004410:	f7fd fb46 	bl	8001aa0 <HAL_GetTick>
 8004414:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004416:	4b39      	ldr	r3, [pc, #228]	; (80044fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	015b      	lsls	r3, r3, #5
 800441c:	0d1b      	lsrs	r3, r3, #20
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	fb02 f303 	mul.w	r3, r2, r3
 8004424:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004426:	e054      	b.n	80044d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442e:	d050      	beq.n	80044d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004430:	f7fd fb36 	bl	8001aa0 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	429a      	cmp	r2, r3
 800443e:	d902      	bls.n	8004446 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d13d      	bne.n	80044c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004454:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800445e:	d111      	bne.n	8004484 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004468:	d004      	beq.n	8004474 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004472:	d107      	bne.n	8004484 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004482:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800448c:	d10f      	bne.n	80044ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e017      	b.n	80044f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4013      	ands	r3, r2
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	429a      	cmp	r2, r3
 80044e0:	bf0c      	ite	eq
 80044e2:	2301      	moveq	r3, #1
 80044e4:	2300      	movne	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d19b      	bne.n	8004428 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3720      	adds	r7, #32
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000000 	.word	0x20000000

08004500 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08a      	sub	sp, #40	; 0x28
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004512:	f7fd fac5 	bl	8001aa0 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	4413      	add	r3, r2
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004522:	f7fd fabd 	bl	8001aa0 <HAL_GetTick>
 8004526:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	330c      	adds	r3, #12
 800452e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004530:	4b3d      	ldr	r3, [pc, #244]	; (8004628 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	00da      	lsls	r2, r3, #3
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	0d1b      	lsrs	r3, r3, #20
 8004540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004542:	fb02 f303 	mul.w	r3, r2, r3
 8004546:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004548:	e060      	b.n	800460c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004550:	d107      	bne.n	8004562 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004560:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004568:	d050      	beq.n	800460c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800456a:	f7fd fa99 	bl	8001aa0 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004576:	429a      	cmp	r2, r3
 8004578:	d902      	bls.n	8004580 <SPI_WaitFifoStateUntilTimeout+0x80>
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	2b00      	cmp	r3, #0
 800457e:	d13d      	bne.n	80045fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800458e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004598:	d111      	bne.n	80045be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a2:	d004      	beq.n	80045ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ac:	d107      	bne.n	80045be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c6:	d10f      	bne.n	80045e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e010      	b.n	800461e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	3b01      	subs	r3, #1
 800460a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	4013      	ands	r3, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	429a      	cmp	r2, r3
 800461a:	d196      	bne.n	800454a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3728      	adds	r7, #40	; 0x28
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000000 	.word	0x20000000

0800462c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af02      	add	r7, sp, #8
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004640:	d111      	bne.n	8004666 <SPI_EndRxTransaction+0x3a>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800464a:	d004      	beq.n	8004656 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004654:	d107      	bne.n	8004666 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004664:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2200      	movs	r2, #0
 800466e:	2180      	movs	r1, #128	; 0x80
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f7ff febd 	bl	80043f0 <SPI_WaitFlagStateUntilTimeout>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d007      	beq.n	800468c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004680:	f043 0220 	orr.w	r2, r3, #32
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e023      	b.n	80046d4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004694:	d11d      	bne.n	80046d2 <SPI_EndRxTransaction+0xa6>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800469e:	d004      	beq.n	80046aa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a8:	d113      	bne.n	80046d2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f7ff ff22 	bl	8004500 <SPI_WaitFifoStateUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c6:	f043 0220 	orr.w	r2, r3, #32
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e000      	b.n	80046d4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f7ff ff03 	bl	8004500 <SPI_WaitFifoStateUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004704:	f043 0220 	orr.w	r2, r3, #32
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e027      	b.n	8004760 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2200      	movs	r2, #0
 8004718:	2180      	movs	r1, #128	; 0x80
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f7ff fe68 	bl	80043f0 <SPI_WaitFlagStateUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800472a:	f043 0220 	orr.w	r2, r3, #32
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e014      	b.n	8004760 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2200      	movs	r2, #0
 800473e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f7ff fedc 	bl	8004500 <SPI_WaitFifoStateUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d007      	beq.n	800475e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004752:	f043 0220 	orr.w	r2, r3, #32
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e000      	b.n	8004760 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e049      	b.n	800480e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fc fcfe 	bl	8001190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3304      	adds	r3, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f000 fa9a 	bl	8004ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d001      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e03b      	b.n	80048a8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <HAL_TIM_Base_Start_IT+0x9c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_TIM_Base_Start_IT+0x4e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485a:	d004      	beq.n	8004866 <HAL_TIM_Base_Start_IT+0x4e>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d115      	bne.n	8004892 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	4b13      	ldr	r3, [pc, #76]	; (80048bc <HAL_TIM_Base_Start_IT+0xa4>)
 800486e:	4013      	ands	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b06      	cmp	r3, #6
 8004876:	d015      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x8c>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487e:	d011      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004890:	e008      	b.n	80048a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0201 	orr.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	e000      	b.n	80048a6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40014000 	.word	0x40014000
 80048bc:	00010007 	.word	0x00010007

080048c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d122      	bne.n	800491c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d11b      	bne.n	800491c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0202 	mvn.w	r2, #2
 80048ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f9ce 	bl	8004ca4 <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f9c0 	bl	8004c90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f9d1 	bl	8004cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b04      	cmp	r3, #4
 8004928:	d122      	bne.n	8004970 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b04      	cmp	r3, #4
 8004936:	d11b      	bne.n	8004970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0204 	mvn.w	r2, #4
 8004940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f9a4 	bl	8004ca4 <HAL_TIM_IC_CaptureCallback>
 800495c:	e005      	b.n	800496a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f996 	bl	8004c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f9a7 	bl	8004cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b08      	cmp	r3, #8
 800497c:	d122      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b08      	cmp	r3, #8
 800498a:	d11b      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0208 	mvn.w	r2, #8
 8004994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2204      	movs	r2, #4
 800499a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f97a 	bl	8004ca4 <HAL_TIM_IC_CaptureCallback>
 80049b0:	e005      	b.n	80049be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f96c 	bl	8004c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f97d 	bl	8004cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d122      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b10      	cmp	r3, #16
 80049de:	d11b      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0210 	mvn.w	r2, #16
 80049e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2208      	movs	r2, #8
 80049ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f950 	bl	8004ca4 <HAL_TIM_IC_CaptureCallback>
 8004a04:	e005      	b.n	8004a12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f942 	bl	8004c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f953 	bl	8004cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d10e      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d107      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0201 	mvn.w	r2, #1
 8004a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fc f8f4 	bl	8000c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4e:	2b80      	cmp	r3, #128	; 0x80
 8004a50:	d10e      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5c:	2b80      	cmp	r3, #128	; 0x80
 8004a5e:	d107      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 faa6 	bl	8004fbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a7e:	d10e      	bne.n	8004a9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8a:	2b80      	cmp	r3, #128	; 0x80
 8004a8c:	d107      	bne.n	8004a9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fa99 	bl	8004fd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b40      	cmp	r3, #64	; 0x40
 8004aaa:	d10e      	bne.n	8004aca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b40      	cmp	r3, #64	; 0x40
 8004ab8:	d107      	bne.n	8004aca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f901 	bl	8004ccc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d10e      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d107      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f06f 0220 	mvn.w	r2, #32
 8004aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fa59 	bl	8004fa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004af6:	bf00      	nop
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b084      	sub	sp, #16
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <HAL_TIM_ConfigClockSource+0x1c>
 8004b16:	2302      	movs	r3, #2
 8004b18:	e0b6      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x18a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2202      	movs	r2, #2
 8004b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b38:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b3c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b44:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b56:	d03e      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0xd8>
 8004b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b5c:	f200 8087 	bhi.w	8004c6e <HAL_TIM_ConfigClockSource+0x170>
 8004b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b64:	f000 8086 	beq.w	8004c74 <HAL_TIM_ConfigClockSource+0x176>
 8004b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6c:	d87f      	bhi.n	8004c6e <HAL_TIM_ConfigClockSource+0x170>
 8004b6e:	2b70      	cmp	r3, #112	; 0x70
 8004b70:	d01a      	beq.n	8004ba8 <HAL_TIM_ConfigClockSource+0xaa>
 8004b72:	2b70      	cmp	r3, #112	; 0x70
 8004b74:	d87b      	bhi.n	8004c6e <HAL_TIM_ConfigClockSource+0x170>
 8004b76:	2b60      	cmp	r3, #96	; 0x60
 8004b78:	d050      	beq.n	8004c1c <HAL_TIM_ConfigClockSource+0x11e>
 8004b7a:	2b60      	cmp	r3, #96	; 0x60
 8004b7c:	d877      	bhi.n	8004c6e <HAL_TIM_ConfigClockSource+0x170>
 8004b7e:	2b50      	cmp	r3, #80	; 0x50
 8004b80:	d03c      	beq.n	8004bfc <HAL_TIM_ConfigClockSource+0xfe>
 8004b82:	2b50      	cmp	r3, #80	; 0x50
 8004b84:	d873      	bhi.n	8004c6e <HAL_TIM_ConfigClockSource+0x170>
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d058      	beq.n	8004c3c <HAL_TIM_ConfigClockSource+0x13e>
 8004b8a:	2b40      	cmp	r3, #64	; 0x40
 8004b8c:	d86f      	bhi.n	8004c6e <HAL_TIM_ConfigClockSource+0x170>
 8004b8e:	2b30      	cmp	r3, #48	; 0x30
 8004b90:	d064      	beq.n	8004c5c <HAL_TIM_ConfigClockSource+0x15e>
 8004b92:	2b30      	cmp	r3, #48	; 0x30
 8004b94:	d86b      	bhi.n	8004c6e <HAL_TIM_ConfigClockSource+0x170>
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	d060      	beq.n	8004c5c <HAL_TIM_ConfigClockSource+0x15e>
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d867      	bhi.n	8004c6e <HAL_TIM_ConfigClockSource+0x170>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d05c      	beq.n	8004c5c <HAL_TIM_ConfigClockSource+0x15e>
 8004ba2:	2b10      	cmp	r3, #16
 8004ba4:	d05a      	beq.n	8004c5c <HAL_TIM_ConfigClockSource+0x15e>
 8004ba6:	e062      	b.n	8004c6e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	6899      	ldr	r1, [r3, #8]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f000 f970 	bl	8004e9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	609a      	str	r2, [r3, #8]
      break;
 8004bd4:	e04f      	b.n	8004c76 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	6899      	ldr	r1, [r3, #8]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f000 f959 	bl	8004e9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bf8:	609a      	str	r2, [r3, #8]
      break;
 8004bfa:	e03c      	b.n	8004c76 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	6859      	ldr	r1, [r3, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	f000 f8cd 	bl	8004da8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2150      	movs	r1, #80	; 0x50
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 f926 	bl	8004e66 <TIM_ITRx_SetConfig>
      break;
 8004c1a:	e02c      	b.n	8004c76 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6818      	ldr	r0, [r3, #0]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	6859      	ldr	r1, [r3, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f000 f8ec 	bl	8004e06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2160      	movs	r1, #96	; 0x60
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 f916 	bl	8004e66 <TIM_ITRx_SetConfig>
      break;
 8004c3a:	e01c      	b.n	8004c76 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	6859      	ldr	r1, [r3, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f000 f8ad 	bl	8004da8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2140      	movs	r1, #64	; 0x40
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 f906 	bl	8004e66 <TIM_ITRx_SetConfig>
      break;
 8004c5a:	e00c      	b.n	8004c76 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4619      	mov	r1, r3
 8004c66:	4610      	mov	r0, r2
 8004c68:	f000 f8fd 	bl	8004e66 <TIM_ITRx_SetConfig>
      break;
 8004c6c:	e003      	b.n	8004c76 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	73fb      	strb	r3, [r7, #15]
      break;
 8004c72:	e000      	b.n	8004c76 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004c74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a2a      	ldr	r2, [pc, #168]	; (8004d9c <TIM_Base_SetConfig+0xbc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_Base_SetConfig+0x20>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfe:	d108      	bne.n	8004d12 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a21      	ldr	r2, [pc, #132]	; (8004d9c <TIM_Base_SetConfig+0xbc>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d00b      	beq.n	8004d32 <TIM_Base_SetConfig+0x52>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d20:	d007      	beq.n	8004d32 <TIM_Base_SetConfig+0x52>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a1e      	ldr	r2, [pc, #120]	; (8004da0 <TIM_Base_SetConfig+0xc0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d003      	beq.n	8004d32 <TIM_Base_SetConfig+0x52>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a1d      	ldr	r2, [pc, #116]	; (8004da4 <TIM_Base_SetConfig+0xc4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d108      	bne.n	8004d44 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a0c      	ldr	r2, [pc, #48]	; (8004d9c <TIM_Base_SetConfig+0xbc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d007      	beq.n	8004d80 <TIM_Base_SetConfig+0xa0>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a0b      	ldr	r2, [pc, #44]	; (8004da0 <TIM_Base_SetConfig+0xc0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d003      	beq.n	8004d80 <TIM_Base_SetConfig+0xa0>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a0a      	ldr	r2, [pc, #40]	; (8004da4 <TIM_Base_SetConfig+0xc4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d103      	bne.n	8004d88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	615a      	str	r2, [r3, #20]
}
 8004d8e:	bf00      	nop
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40012c00 	.word	0x40012c00
 8004da0:	40014000 	.word	0x40014000
 8004da4:	40014400 	.word	0x40014400

08004da8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f023 0201 	bic.w	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f023 030a 	bic.w	r3, r3, #10
 8004de4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	621a      	str	r2, [r3, #32]
}
 8004dfa:	bf00      	nop
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b087      	sub	sp, #28
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f023 0210 	bic.w	r2, r3, #16
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	031b      	lsls	r3, r3, #12
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b085      	sub	sp, #20
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f043 0307 	orr.w	r3, r3, #7
 8004e88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	609a      	str	r2, [r3, #8]
}
 8004e90:	bf00      	nop
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	021a      	lsls	r2, r3, #8
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	609a      	str	r2, [r3, #8]
}
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e04f      	b.n	8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a21      	ldr	r2, [pc, #132]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d108      	bne.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a14      	ldr	r2, [pc, #80]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d009      	beq.n	8004f68 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5c:	d004      	beq.n	8004f68 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a10      	ldr	r2, [pc, #64]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d10c      	bne.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40014000 	.word	0x40014000

08004fa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <__libc_init_array>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	4d0d      	ldr	r5, [pc, #52]	; (800501c <__libc_init_array+0x38>)
 8004fe8:	4c0d      	ldr	r4, [pc, #52]	; (8005020 <__libc_init_array+0x3c>)
 8004fea:	1b64      	subs	r4, r4, r5
 8004fec:	10a4      	asrs	r4, r4, #2
 8004fee:	2600      	movs	r6, #0
 8004ff0:	42a6      	cmp	r6, r4
 8004ff2:	d109      	bne.n	8005008 <__libc_init_array+0x24>
 8004ff4:	4d0b      	ldr	r5, [pc, #44]	; (8005024 <__libc_init_array+0x40>)
 8004ff6:	4c0c      	ldr	r4, [pc, #48]	; (8005028 <__libc_init_array+0x44>)
 8004ff8:	f000 fa98 	bl	800552c <_init>
 8004ffc:	1b64      	subs	r4, r4, r5
 8004ffe:	10a4      	asrs	r4, r4, #2
 8005000:	2600      	movs	r6, #0
 8005002:	42a6      	cmp	r6, r4
 8005004:	d105      	bne.n	8005012 <__libc_init_array+0x2e>
 8005006:	bd70      	pop	{r4, r5, r6, pc}
 8005008:	f855 3b04 	ldr.w	r3, [r5], #4
 800500c:	4798      	blx	r3
 800500e:	3601      	adds	r6, #1
 8005010:	e7ee      	b.n	8004ff0 <__libc_init_array+0xc>
 8005012:	f855 3b04 	ldr.w	r3, [r5], #4
 8005016:	4798      	blx	r3
 8005018:	3601      	adds	r6, #1
 800501a:	e7f2      	b.n	8005002 <__libc_init_array+0x1e>
 800501c:	08005600 	.word	0x08005600
 8005020:	08005600 	.word	0x08005600
 8005024:	08005600 	.word	0x08005600
 8005028:	08005604 	.word	0x08005604

0800502c <memset>:
 800502c:	4402      	add	r2, r0
 800502e:	4603      	mov	r3, r0
 8005030:	4293      	cmp	r3, r2
 8005032:	d100      	bne.n	8005036 <memset+0xa>
 8005034:	4770      	bx	lr
 8005036:	f803 1b01 	strb.w	r1, [r3], #1
 800503a:	e7f9      	b.n	8005030 <memset+0x4>

0800503c <atan2>:
 800503c:	f000 b800 	b.w	8005040 <__ieee754_atan2>

08005040 <__ieee754_atan2>:
 8005040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005044:	ec57 6b11 	vmov	r6, r7, d1
 8005048:	4273      	negs	r3, r6
 800504a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80051d0 <__ieee754_atan2+0x190>
 800504e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8005052:	4333      	orrs	r3, r6
 8005054:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005058:	4573      	cmp	r3, lr
 800505a:	ec51 0b10 	vmov	r0, r1, d0
 800505e:	ee11 8a10 	vmov	r8, s2
 8005062:	d80a      	bhi.n	800507a <__ieee754_atan2+0x3a>
 8005064:	4244      	negs	r4, r0
 8005066:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800506a:	4304      	orrs	r4, r0
 800506c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005070:	4574      	cmp	r4, lr
 8005072:	ee10 9a10 	vmov	r9, s0
 8005076:	468c      	mov	ip, r1
 8005078:	d907      	bls.n	800508a <__ieee754_atan2+0x4a>
 800507a:	4632      	mov	r2, r6
 800507c:	463b      	mov	r3, r7
 800507e:	f7fb f8ad 	bl	80001dc <__adddf3>
 8005082:	ec41 0b10 	vmov	d0, r0, r1
 8005086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800508a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800508e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005092:	4334      	orrs	r4, r6
 8005094:	d103      	bne.n	800509e <__ieee754_atan2+0x5e>
 8005096:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800509a:	f000 b89d 	b.w	80051d8 <atan>
 800509e:	17bc      	asrs	r4, r7, #30
 80050a0:	f004 0402 	and.w	r4, r4, #2
 80050a4:	ea53 0909 	orrs.w	r9, r3, r9
 80050a8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80050ac:	d107      	bne.n	80050be <__ieee754_atan2+0x7e>
 80050ae:	2c02      	cmp	r4, #2
 80050b0:	d060      	beq.n	8005174 <__ieee754_atan2+0x134>
 80050b2:	2c03      	cmp	r4, #3
 80050b4:	d1e5      	bne.n	8005082 <__ieee754_atan2+0x42>
 80050b6:	a142      	add	r1, pc, #264	; (adr r1, 80051c0 <__ieee754_atan2+0x180>)
 80050b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050bc:	e7e1      	b.n	8005082 <__ieee754_atan2+0x42>
 80050be:	ea52 0808 	orrs.w	r8, r2, r8
 80050c2:	d106      	bne.n	80050d2 <__ieee754_atan2+0x92>
 80050c4:	f1bc 0f00 	cmp.w	ip, #0
 80050c8:	da5f      	bge.n	800518a <__ieee754_atan2+0x14a>
 80050ca:	a13f      	add	r1, pc, #252	; (adr r1, 80051c8 <__ieee754_atan2+0x188>)
 80050cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050d0:	e7d7      	b.n	8005082 <__ieee754_atan2+0x42>
 80050d2:	4572      	cmp	r2, lr
 80050d4:	d10f      	bne.n	80050f6 <__ieee754_atan2+0xb6>
 80050d6:	4293      	cmp	r3, r2
 80050d8:	f104 34ff 	add.w	r4, r4, #4294967295
 80050dc:	d107      	bne.n	80050ee <__ieee754_atan2+0xae>
 80050de:	2c02      	cmp	r4, #2
 80050e0:	d84c      	bhi.n	800517c <__ieee754_atan2+0x13c>
 80050e2:	4b35      	ldr	r3, [pc, #212]	; (80051b8 <__ieee754_atan2+0x178>)
 80050e4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80050e8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80050ec:	e7c9      	b.n	8005082 <__ieee754_atan2+0x42>
 80050ee:	2c02      	cmp	r4, #2
 80050f0:	d848      	bhi.n	8005184 <__ieee754_atan2+0x144>
 80050f2:	4b32      	ldr	r3, [pc, #200]	; (80051bc <__ieee754_atan2+0x17c>)
 80050f4:	e7f6      	b.n	80050e4 <__ieee754_atan2+0xa4>
 80050f6:	4573      	cmp	r3, lr
 80050f8:	d0e4      	beq.n	80050c4 <__ieee754_atan2+0x84>
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005100:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005104:	da1e      	bge.n	8005144 <__ieee754_atan2+0x104>
 8005106:	2f00      	cmp	r7, #0
 8005108:	da01      	bge.n	800510e <__ieee754_atan2+0xce>
 800510a:	323c      	adds	r2, #60	; 0x3c
 800510c:	db1e      	blt.n	800514c <__ieee754_atan2+0x10c>
 800510e:	4632      	mov	r2, r6
 8005110:	463b      	mov	r3, r7
 8005112:	f7fb fb43 	bl	800079c <__aeabi_ddiv>
 8005116:	ec41 0b10 	vmov	d0, r0, r1
 800511a:	f000 f9fd 	bl	8005518 <fabs>
 800511e:	f000 f85b 	bl	80051d8 <atan>
 8005122:	ec51 0b10 	vmov	r0, r1, d0
 8005126:	2c01      	cmp	r4, #1
 8005128:	d013      	beq.n	8005152 <__ieee754_atan2+0x112>
 800512a:	2c02      	cmp	r4, #2
 800512c:	d015      	beq.n	800515a <__ieee754_atan2+0x11a>
 800512e:	2c00      	cmp	r4, #0
 8005130:	d0a7      	beq.n	8005082 <__ieee754_atan2+0x42>
 8005132:	a319      	add	r3, pc, #100	; (adr r3, 8005198 <__ieee754_atan2+0x158>)
 8005134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005138:	f7fb f84e 	bl	80001d8 <__aeabi_dsub>
 800513c:	a318      	add	r3, pc, #96	; (adr r3, 80051a0 <__ieee754_atan2+0x160>)
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	e014      	b.n	800516e <__ieee754_atan2+0x12e>
 8005144:	a118      	add	r1, pc, #96	; (adr r1, 80051a8 <__ieee754_atan2+0x168>)
 8005146:	e9d1 0100 	ldrd	r0, r1, [r1]
 800514a:	e7ec      	b.n	8005126 <__ieee754_atan2+0xe6>
 800514c:	2000      	movs	r0, #0
 800514e:	2100      	movs	r1, #0
 8005150:	e7e9      	b.n	8005126 <__ieee754_atan2+0xe6>
 8005152:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005156:	4619      	mov	r1, r3
 8005158:	e793      	b.n	8005082 <__ieee754_atan2+0x42>
 800515a:	a30f      	add	r3, pc, #60	; (adr r3, 8005198 <__ieee754_atan2+0x158>)
 800515c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005160:	f7fb f83a 	bl	80001d8 <__aeabi_dsub>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	a10d      	add	r1, pc, #52	; (adr r1, 80051a0 <__ieee754_atan2+0x160>)
 800516a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800516e:	f7fb f833 	bl	80001d8 <__aeabi_dsub>
 8005172:	e786      	b.n	8005082 <__ieee754_atan2+0x42>
 8005174:	a10a      	add	r1, pc, #40	; (adr r1, 80051a0 <__ieee754_atan2+0x160>)
 8005176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800517a:	e782      	b.n	8005082 <__ieee754_atan2+0x42>
 800517c:	a10c      	add	r1, pc, #48	; (adr r1, 80051b0 <__ieee754_atan2+0x170>)
 800517e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005182:	e77e      	b.n	8005082 <__ieee754_atan2+0x42>
 8005184:	2000      	movs	r0, #0
 8005186:	2100      	movs	r1, #0
 8005188:	e77b      	b.n	8005082 <__ieee754_atan2+0x42>
 800518a:	a107      	add	r1, pc, #28	; (adr r1, 80051a8 <__ieee754_atan2+0x168>)
 800518c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005190:	e777      	b.n	8005082 <__ieee754_atan2+0x42>
 8005192:	bf00      	nop
 8005194:	f3af 8000 	nop.w
 8005198:	33145c07 	.word	0x33145c07
 800519c:	3ca1a626 	.word	0x3ca1a626
 80051a0:	54442d18 	.word	0x54442d18
 80051a4:	400921fb 	.word	0x400921fb
 80051a8:	54442d18 	.word	0x54442d18
 80051ac:	3ff921fb 	.word	0x3ff921fb
 80051b0:	54442d18 	.word	0x54442d18
 80051b4:	3fe921fb 	.word	0x3fe921fb
 80051b8:	08005590 	.word	0x08005590
 80051bc:	080055a8 	.word	0x080055a8
 80051c0:	54442d18 	.word	0x54442d18
 80051c4:	c00921fb 	.word	0xc00921fb
 80051c8:	54442d18 	.word	0x54442d18
 80051cc:	bff921fb 	.word	0xbff921fb
 80051d0:	7ff00000 	.word	0x7ff00000
 80051d4:	00000000 	.word	0x00000000

080051d8 <atan>:
 80051d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051dc:	ec55 4b10 	vmov	r4, r5, d0
 80051e0:	4bc3      	ldr	r3, [pc, #780]	; (80054f0 <atan+0x318>)
 80051e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80051e6:	429e      	cmp	r6, r3
 80051e8:	46ab      	mov	fp, r5
 80051ea:	dd18      	ble.n	800521e <atan+0x46>
 80051ec:	4bc1      	ldr	r3, [pc, #772]	; (80054f4 <atan+0x31c>)
 80051ee:	429e      	cmp	r6, r3
 80051f0:	dc01      	bgt.n	80051f6 <atan+0x1e>
 80051f2:	d109      	bne.n	8005208 <atan+0x30>
 80051f4:	b144      	cbz	r4, 8005208 <atan+0x30>
 80051f6:	4622      	mov	r2, r4
 80051f8:	462b      	mov	r3, r5
 80051fa:	4620      	mov	r0, r4
 80051fc:	4629      	mov	r1, r5
 80051fe:	f7fa ffed 	bl	80001dc <__adddf3>
 8005202:	4604      	mov	r4, r0
 8005204:	460d      	mov	r5, r1
 8005206:	e006      	b.n	8005216 <atan+0x3e>
 8005208:	f1bb 0f00 	cmp.w	fp, #0
 800520c:	f300 8131 	bgt.w	8005472 <atan+0x29a>
 8005210:	a59b      	add	r5, pc, #620	; (adr r5, 8005480 <atan+0x2a8>)
 8005212:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005216:	ec45 4b10 	vmov	d0, r4, r5
 800521a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800521e:	4bb6      	ldr	r3, [pc, #728]	; (80054f8 <atan+0x320>)
 8005220:	429e      	cmp	r6, r3
 8005222:	dc14      	bgt.n	800524e <atan+0x76>
 8005224:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005228:	429e      	cmp	r6, r3
 800522a:	dc0d      	bgt.n	8005248 <atan+0x70>
 800522c:	a396      	add	r3, pc, #600	; (adr r3, 8005488 <atan+0x2b0>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	ee10 0a10 	vmov	r0, s0
 8005236:	4629      	mov	r1, r5
 8005238:	f7fa ffd0 	bl	80001dc <__adddf3>
 800523c:	4baf      	ldr	r3, [pc, #700]	; (80054fc <atan+0x324>)
 800523e:	2200      	movs	r2, #0
 8005240:	f7fb fc12 	bl	8000a68 <__aeabi_dcmpgt>
 8005244:	2800      	cmp	r0, #0
 8005246:	d1e6      	bne.n	8005216 <atan+0x3e>
 8005248:	f04f 3aff 	mov.w	sl, #4294967295
 800524c:	e02b      	b.n	80052a6 <atan+0xce>
 800524e:	f000 f963 	bl	8005518 <fabs>
 8005252:	4bab      	ldr	r3, [pc, #684]	; (8005500 <atan+0x328>)
 8005254:	429e      	cmp	r6, r3
 8005256:	ec55 4b10 	vmov	r4, r5, d0
 800525a:	f300 80bf 	bgt.w	80053dc <atan+0x204>
 800525e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005262:	429e      	cmp	r6, r3
 8005264:	f300 80a0 	bgt.w	80053a8 <atan+0x1d0>
 8005268:	ee10 2a10 	vmov	r2, s0
 800526c:	ee10 0a10 	vmov	r0, s0
 8005270:	462b      	mov	r3, r5
 8005272:	4629      	mov	r1, r5
 8005274:	f7fa ffb2 	bl	80001dc <__adddf3>
 8005278:	4ba0      	ldr	r3, [pc, #640]	; (80054fc <atan+0x324>)
 800527a:	2200      	movs	r2, #0
 800527c:	f7fa ffac 	bl	80001d8 <__aeabi_dsub>
 8005280:	2200      	movs	r2, #0
 8005282:	4606      	mov	r6, r0
 8005284:	460f      	mov	r7, r1
 8005286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800528a:	4620      	mov	r0, r4
 800528c:	4629      	mov	r1, r5
 800528e:	f7fa ffa5 	bl	80001dc <__adddf3>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4630      	mov	r0, r6
 8005298:	4639      	mov	r1, r7
 800529a:	f7fb fa7f 	bl	800079c <__aeabi_ddiv>
 800529e:	f04f 0a00 	mov.w	sl, #0
 80052a2:	4604      	mov	r4, r0
 80052a4:	460d      	mov	r5, r1
 80052a6:	4622      	mov	r2, r4
 80052a8:	462b      	mov	r3, r5
 80052aa:	4620      	mov	r0, r4
 80052ac:	4629      	mov	r1, r5
 80052ae:	f7fb f94b 	bl	8000548 <__aeabi_dmul>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4680      	mov	r8, r0
 80052b8:	4689      	mov	r9, r1
 80052ba:	f7fb f945 	bl	8000548 <__aeabi_dmul>
 80052be:	a374      	add	r3, pc, #464	; (adr r3, 8005490 <atan+0x2b8>)
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	4606      	mov	r6, r0
 80052c6:	460f      	mov	r7, r1
 80052c8:	f7fb f93e 	bl	8000548 <__aeabi_dmul>
 80052cc:	a372      	add	r3, pc, #456	; (adr r3, 8005498 <atan+0x2c0>)
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	f7fa ff83 	bl	80001dc <__adddf3>
 80052d6:	4632      	mov	r2, r6
 80052d8:	463b      	mov	r3, r7
 80052da:	f7fb f935 	bl	8000548 <__aeabi_dmul>
 80052de:	a370      	add	r3, pc, #448	; (adr r3, 80054a0 <atan+0x2c8>)
 80052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e4:	f7fa ff7a 	bl	80001dc <__adddf3>
 80052e8:	4632      	mov	r2, r6
 80052ea:	463b      	mov	r3, r7
 80052ec:	f7fb f92c 	bl	8000548 <__aeabi_dmul>
 80052f0:	a36d      	add	r3, pc, #436	; (adr r3, 80054a8 <atan+0x2d0>)
 80052f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f6:	f7fa ff71 	bl	80001dc <__adddf3>
 80052fa:	4632      	mov	r2, r6
 80052fc:	463b      	mov	r3, r7
 80052fe:	f7fb f923 	bl	8000548 <__aeabi_dmul>
 8005302:	a36b      	add	r3, pc, #428	; (adr r3, 80054b0 <atan+0x2d8>)
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	f7fa ff68 	bl	80001dc <__adddf3>
 800530c:	4632      	mov	r2, r6
 800530e:	463b      	mov	r3, r7
 8005310:	f7fb f91a 	bl	8000548 <__aeabi_dmul>
 8005314:	a368      	add	r3, pc, #416	; (adr r3, 80054b8 <atan+0x2e0>)
 8005316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531a:	f7fa ff5f 	bl	80001dc <__adddf3>
 800531e:	4642      	mov	r2, r8
 8005320:	464b      	mov	r3, r9
 8005322:	f7fb f911 	bl	8000548 <__aeabi_dmul>
 8005326:	a366      	add	r3, pc, #408	; (adr r3, 80054c0 <atan+0x2e8>)
 8005328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532c:	4680      	mov	r8, r0
 800532e:	4689      	mov	r9, r1
 8005330:	4630      	mov	r0, r6
 8005332:	4639      	mov	r1, r7
 8005334:	f7fb f908 	bl	8000548 <__aeabi_dmul>
 8005338:	a363      	add	r3, pc, #396	; (adr r3, 80054c8 <atan+0x2f0>)
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	f7fa ff4b 	bl	80001d8 <__aeabi_dsub>
 8005342:	4632      	mov	r2, r6
 8005344:	463b      	mov	r3, r7
 8005346:	f7fb f8ff 	bl	8000548 <__aeabi_dmul>
 800534a:	a361      	add	r3, pc, #388	; (adr r3, 80054d0 <atan+0x2f8>)
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f7fa ff42 	bl	80001d8 <__aeabi_dsub>
 8005354:	4632      	mov	r2, r6
 8005356:	463b      	mov	r3, r7
 8005358:	f7fb f8f6 	bl	8000548 <__aeabi_dmul>
 800535c:	a35e      	add	r3, pc, #376	; (adr r3, 80054d8 <atan+0x300>)
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	f7fa ff39 	bl	80001d8 <__aeabi_dsub>
 8005366:	4632      	mov	r2, r6
 8005368:	463b      	mov	r3, r7
 800536a:	f7fb f8ed 	bl	8000548 <__aeabi_dmul>
 800536e:	a35c      	add	r3, pc, #368	; (adr r3, 80054e0 <atan+0x308>)
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	f7fa ff30 	bl	80001d8 <__aeabi_dsub>
 8005378:	4632      	mov	r2, r6
 800537a:	463b      	mov	r3, r7
 800537c:	f7fb f8e4 	bl	8000548 <__aeabi_dmul>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4640      	mov	r0, r8
 8005386:	4649      	mov	r1, r9
 8005388:	f7fa ff28 	bl	80001dc <__adddf3>
 800538c:	4622      	mov	r2, r4
 800538e:	462b      	mov	r3, r5
 8005390:	f7fb f8da 	bl	8000548 <__aeabi_dmul>
 8005394:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	d14b      	bne.n	8005436 <atan+0x25e>
 800539e:	4620      	mov	r0, r4
 80053a0:	4629      	mov	r1, r5
 80053a2:	f7fa ff19 	bl	80001d8 <__aeabi_dsub>
 80053a6:	e72c      	b.n	8005202 <atan+0x2a>
 80053a8:	ee10 0a10 	vmov	r0, s0
 80053ac:	4b53      	ldr	r3, [pc, #332]	; (80054fc <atan+0x324>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	4629      	mov	r1, r5
 80053b2:	f7fa ff11 	bl	80001d8 <__aeabi_dsub>
 80053b6:	4b51      	ldr	r3, [pc, #324]	; (80054fc <atan+0x324>)
 80053b8:	4606      	mov	r6, r0
 80053ba:	460f      	mov	r7, r1
 80053bc:	2200      	movs	r2, #0
 80053be:	4620      	mov	r0, r4
 80053c0:	4629      	mov	r1, r5
 80053c2:	f7fa ff0b 	bl	80001dc <__adddf3>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4630      	mov	r0, r6
 80053cc:	4639      	mov	r1, r7
 80053ce:	f7fb f9e5 	bl	800079c <__aeabi_ddiv>
 80053d2:	f04f 0a01 	mov.w	sl, #1
 80053d6:	4604      	mov	r4, r0
 80053d8:	460d      	mov	r5, r1
 80053da:	e764      	b.n	80052a6 <atan+0xce>
 80053dc:	4b49      	ldr	r3, [pc, #292]	; (8005504 <atan+0x32c>)
 80053de:	429e      	cmp	r6, r3
 80053e0:	da1d      	bge.n	800541e <atan+0x246>
 80053e2:	ee10 0a10 	vmov	r0, s0
 80053e6:	4b48      	ldr	r3, [pc, #288]	; (8005508 <atan+0x330>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	4629      	mov	r1, r5
 80053ec:	f7fa fef4 	bl	80001d8 <__aeabi_dsub>
 80053f0:	4b45      	ldr	r3, [pc, #276]	; (8005508 <atan+0x330>)
 80053f2:	4606      	mov	r6, r0
 80053f4:	460f      	mov	r7, r1
 80053f6:	2200      	movs	r2, #0
 80053f8:	4620      	mov	r0, r4
 80053fa:	4629      	mov	r1, r5
 80053fc:	f7fb f8a4 	bl	8000548 <__aeabi_dmul>
 8005400:	4b3e      	ldr	r3, [pc, #248]	; (80054fc <atan+0x324>)
 8005402:	2200      	movs	r2, #0
 8005404:	f7fa feea 	bl	80001dc <__adddf3>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4630      	mov	r0, r6
 800540e:	4639      	mov	r1, r7
 8005410:	f7fb f9c4 	bl	800079c <__aeabi_ddiv>
 8005414:	f04f 0a02 	mov.w	sl, #2
 8005418:	4604      	mov	r4, r0
 800541a:	460d      	mov	r5, r1
 800541c:	e743      	b.n	80052a6 <atan+0xce>
 800541e:	462b      	mov	r3, r5
 8005420:	ee10 2a10 	vmov	r2, s0
 8005424:	4939      	ldr	r1, [pc, #228]	; (800550c <atan+0x334>)
 8005426:	2000      	movs	r0, #0
 8005428:	f7fb f9b8 	bl	800079c <__aeabi_ddiv>
 800542c:	f04f 0a03 	mov.w	sl, #3
 8005430:	4604      	mov	r4, r0
 8005432:	460d      	mov	r5, r1
 8005434:	e737      	b.n	80052a6 <atan+0xce>
 8005436:	4b36      	ldr	r3, [pc, #216]	; (8005510 <atan+0x338>)
 8005438:	4e36      	ldr	r6, [pc, #216]	; (8005514 <atan+0x33c>)
 800543a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800543e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8005442:	e9da 2300 	ldrd	r2, r3, [sl]
 8005446:	f7fa fec7 	bl	80001d8 <__aeabi_dsub>
 800544a:	4622      	mov	r2, r4
 800544c:	462b      	mov	r3, r5
 800544e:	f7fa fec3 	bl	80001d8 <__aeabi_dsub>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	e9d6 0100 	ldrd	r0, r1, [r6]
 800545a:	f7fa febd 	bl	80001d8 <__aeabi_dsub>
 800545e:	f1bb 0f00 	cmp.w	fp, #0
 8005462:	4604      	mov	r4, r0
 8005464:	460d      	mov	r5, r1
 8005466:	f6bf aed6 	bge.w	8005216 <atan+0x3e>
 800546a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800546e:	461d      	mov	r5, r3
 8005470:	e6d1      	b.n	8005216 <atan+0x3e>
 8005472:	a51d      	add	r5, pc, #116	; (adr r5, 80054e8 <atan+0x310>)
 8005474:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005478:	e6cd      	b.n	8005216 <atan+0x3e>
 800547a:	bf00      	nop
 800547c:	f3af 8000 	nop.w
 8005480:	54442d18 	.word	0x54442d18
 8005484:	bff921fb 	.word	0xbff921fb
 8005488:	8800759c 	.word	0x8800759c
 800548c:	7e37e43c 	.word	0x7e37e43c
 8005490:	e322da11 	.word	0xe322da11
 8005494:	3f90ad3a 	.word	0x3f90ad3a
 8005498:	24760deb 	.word	0x24760deb
 800549c:	3fa97b4b 	.word	0x3fa97b4b
 80054a0:	a0d03d51 	.word	0xa0d03d51
 80054a4:	3fb10d66 	.word	0x3fb10d66
 80054a8:	c54c206e 	.word	0xc54c206e
 80054ac:	3fb745cd 	.word	0x3fb745cd
 80054b0:	920083ff 	.word	0x920083ff
 80054b4:	3fc24924 	.word	0x3fc24924
 80054b8:	5555550d 	.word	0x5555550d
 80054bc:	3fd55555 	.word	0x3fd55555
 80054c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80054c4:	bfa2b444 	.word	0xbfa2b444
 80054c8:	52defd9a 	.word	0x52defd9a
 80054cc:	3fadde2d 	.word	0x3fadde2d
 80054d0:	af749a6d 	.word	0xaf749a6d
 80054d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80054d8:	fe231671 	.word	0xfe231671
 80054dc:	3fbc71c6 	.word	0x3fbc71c6
 80054e0:	9998ebc4 	.word	0x9998ebc4
 80054e4:	3fc99999 	.word	0x3fc99999
 80054e8:	54442d18 	.word	0x54442d18
 80054ec:	3ff921fb 	.word	0x3ff921fb
 80054f0:	440fffff 	.word	0x440fffff
 80054f4:	7ff00000 	.word	0x7ff00000
 80054f8:	3fdbffff 	.word	0x3fdbffff
 80054fc:	3ff00000 	.word	0x3ff00000
 8005500:	3ff2ffff 	.word	0x3ff2ffff
 8005504:	40038000 	.word	0x40038000
 8005508:	3ff80000 	.word	0x3ff80000
 800550c:	bff00000 	.word	0xbff00000
 8005510:	080055e0 	.word	0x080055e0
 8005514:	080055c0 	.word	0x080055c0

08005518 <fabs>:
 8005518:	ec51 0b10 	vmov	r0, r1, d0
 800551c:	ee10 2a10 	vmov	r2, s0
 8005520:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005524:	ec43 2b10 	vmov	d0, r2, r3
 8005528:	4770      	bx	lr
	...

0800552c <_init>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	bf00      	nop
 8005530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005532:	bc08      	pop	{r3}
 8005534:	469e      	mov	lr, r3
 8005536:	4770      	bx	lr

08005538 <_fini>:
 8005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553a:	bf00      	nop
 800553c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553e:	bc08      	pop	{r3}
 8005540:	469e      	mov	lr, r3
 8005542:	4770      	bx	lr
